# created by sunspec_create.py (2025-07-01 20:40:56.836488+00:00)
# source https://github.com/sunspec/models/tree/master/json 
# Copyright and Trademark: SunpSpec Alliance: Apache License https://github.com/sunspec/models/blob/master/LICENSE 

class SunSpec_Specification:
	Specification = {
	(1, 0): ("common", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Mn', 'string', 16), 18: ('Md', 'string', 16), 34: ('Opt', 'string', 8), 42: ('Vr', 'string', 8), 50: ('SN', 'string', 16), 66: ('DA', 'uint16', 1), 67: ('Pad', 'pad', 1)}),
	(10, 0): ("model_10", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('St', 'enum16', 1), 3: ('Ctl', 'uint16', 1), 4: ('Typ', 'enum16', 1), 5: ('Pad', 'pad', 1)}),
	(101, 0): ("inverter_single_phase", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'uint16', 1), 3: ('AphA[A]', 'uint16', 1), 4: ('AphB[A]', 'uint16', 1), 5: ('AphC[A]', 'uint16', 1), 6: ('A_SF', 'sunssf', 1), 7: ('PPVphAB[V]', 'uint16', 1), 8: ('PPVphBC[V]', 'uint16', 1), 9: ('PPVphCA[V]', 'uint16', 1), 10: ('PhVphA[V]', 'uint16', 1), 11: ('PhVphB[V]', 'uint16', 1), 12: ('PhVphC[V]', 'uint16', 1), 13: ('V_SF', 'sunssf', 1), 14: ('W[W]', 'int16', 1), 15: ('W_SF', 'sunssf', 1), 16: ('Hz[Hz]', 'uint16', 1), 17: ('Hz_SF', 'sunssf', 1), 18: ('VA[VA]', 'int16', 1), 19: ('VA_SF', 'sunssf', 1), 20: ('VAr[var]', 'int16', 1), 21: ('VAr_SF', 'sunssf', 1), 22: ('PF[Pct]', 'int16', 1), 23: ('PF_SF', 'sunssf', 1), 24: ('WH[Wh]', 'acc32', 2), 26: ('WH_SF', 'sunssf', 1), 27: ('DCA[A]', 'uint16', 1), 28: ('DCA_SF', 'sunssf', 1), 29: ('DCV[V]', 'uint16', 1), 30: ('DCV_SF', 'sunssf', 1), 31: ('DCW[W]', 'int16', 1), 32: ('DCW_SF', 'sunssf', 1), 33: ('TmpCab[C]', 'int16', 1), 34: ('TmpSnk[C]', 'int16', 1), 35: ('TmpTrns[C]', 'int16', 1), 36: ('TmpOt[C]', 'int16', 1), 37: ('Tmp_SF', 'sunssf', 1), 38: ('St', 'enum16', 1), 39: ('StVnd', 'enum16', 1), 40: ('Evt1', 'bitfield32', 2), 42: ('Evt2', 'bitfield32', 2), 44: ('EvtVnd1', 'bitfield32', 2), 46: ('EvtVnd2', 'bitfield32', 2), 48: ('EvtVnd3', 'bitfield32', 2), 50: ('EvtVnd4', 'bitfield32', 2)}),
	(102, 0): ("inverter_split_phase", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'uint16', 1), 3: ('AphA[A]', 'uint16', 1), 4: ('AphB[A]', 'uint16', 1), 5: ('AphC[A]', 'uint16', 1), 6: ('A_SF', 'sunssf', 1), 7: ('PPVphAB[V]', 'uint16', 1), 8: ('PPVphBC[V]', 'uint16', 1), 9: ('PPVphCA[V]', 'uint16', 1), 10: ('PhVphA[V]', 'uint16', 1), 11: ('PhVphB[V]', 'uint16', 1), 12: ('PhVphC[V]', 'uint16', 1), 13: ('V_SF', 'sunssf', 1), 14: ('W[W]', 'int16', 1), 15: ('W_SF', 'sunssf', 1), 16: ('Hz[Hz]', 'uint16', 1), 17: ('Hz_SF', 'sunssf', 1), 18: ('VA[VA]', 'int16', 1), 19: ('VA_SF', 'sunssf', 1), 20: ('VAr[var]', 'int16', 1), 21: ('VAr_SF', 'sunssf', 1), 22: ('PF[Pct]', 'int16', 1), 23: ('PF_SF', 'sunssf', 1), 24: ('WH[Wh]', 'acc32', 2), 26: ('WH_SF', 'sunssf', 1), 27: ('DCA[A]', 'uint16', 1), 28: ('DCA_SF', 'sunssf', 1), 29: ('DCV[V]', 'uint16', 1), 30: ('DCV_SF', 'sunssf', 1), 31: ('DCW[W]', 'int16', 1), 32: ('DCW_SF', 'sunssf', 1), 33: ('TmpCab[C]', 'int16', 1), 34: ('TmpSnk[C]', 'int16', 1), 35: ('TmpTrns[C]', 'int16', 1), 36: ('TmpOt[C]', 'int16', 1), 37: ('Tmp_SF', 'sunssf', 1), 38: ('St', 'enum16', 1), 39: ('StVnd', 'enum16', 1), 40: ('Evt1', 'bitfield32', 2), 42: ('Evt2', 'bitfield32', 2), 44: ('EvtVnd1', 'bitfield32', 2), 46: ('EvtVnd2', 'bitfield32', 2), 48: ('EvtVnd3', 'bitfield32', 2), 50: ('EvtVnd4', 'bitfield32', 2)}),
	(103, 0): ("inverter_three_phase", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'uint16', 1), 3: ('AphA[A]', 'uint16', 1), 4: ('AphB[A]', 'uint16', 1), 5: ('AphC[A]', 'uint16', 1), 6: ('A_SF', 'sunssf', 1), 7: ('PPVphAB[V]', 'uint16', 1), 8: ('PPVphBC[V]', 'uint16', 1), 9: ('PPVphCA[V]', 'uint16', 1), 10: ('PhVphA[V]', 'uint16', 1), 11: ('PhVphB[V]', 'uint16', 1), 12: ('PhVphC[V]', 'uint16', 1), 13: ('V_SF', 'sunssf', 1), 14: ('W[W]', 'int16', 1), 15: ('W_SF', 'sunssf', 1), 16: ('Hz[Hz]', 'uint16', 1), 17: ('Hz_SF', 'sunssf', 1), 18: ('VA[VA]', 'int16', 1), 19: ('VA_SF', 'sunssf', 1), 20: ('VAr[var]', 'int16', 1), 21: ('VAr_SF', 'sunssf', 1), 22: ('PF[Pct]', 'int16', 1), 23: ('PF_SF', 'sunssf', 1), 24: ('WH[Wh]', 'acc32', 2), 26: ('WH_SF', 'sunssf', 1), 27: ('DCA[A]', 'uint16', 1), 28: ('DCA_SF', 'sunssf', 1), 29: ('DCV[V]', 'uint16', 1), 30: ('DCV_SF', 'sunssf', 1), 31: ('DCW[W]', 'int16', 1), 32: ('DCW_SF', 'sunssf', 1), 33: ('TmpCab[C]', 'int16', 1), 34: ('TmpSnk[C]', 'int16', 1), 35: ('TmpTrns[C]', 'int16', 1), 36: ('TmpOt[C]', 'int16', 1), 37: ('Tmp_SF', 'sunssf', 1), 38: ('St', 'enum16', 1), 39: ('StVnd', 'enum16', 1), 40: ('Evt1', 'bitfield32', 2), 42: ('Evt2', 'bitfield32', 2), 44: ('EvtVnd1', 'bitfield32', 2), 46: ('EvtVnd2', 'bitfield32', 2), 48: ('EvtVnd3', 'bitfield32', 2), 50: ('EvtVnd4', 'bitfield32', 2)}),
	(11, 0): ("model_11", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Spd[Mbps]', 'uint16', 1), 3: ('CfgSt', 'bitfield16', 1), 4: ('St', 'enum16', 1), 5: ('MAC', 'eui48', 4), 9: ('Nam', 'string', 4), 13: ('Ctl', 'bitfield16', 1), 14: ('FrcSpd[Mbps]', 'uint16', 1)}),
	(111, 0): ("inverter_single_phase_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'float32', 2), 4: ('AphA[A]', 'float32', 2), 6: ('AphB[A]', 'float32', 2), 8: ('AphC[A]', 'float32', 2), 10: ('PPVphAB[V]', 'float32', 2), 12: ('PPVphBC[V]', 'float32', 2), 14: ('PPVphCA[V]', 'float32', 2), 16: ('PhVphA[V]', 'float32', 2), 18: ('PhVphB[V]', 'float32', 2), 20: ('PhVphC[V]', 'float32', 2), 22: ('W[W]', 'float32', 2), 24: ('Hz[Hz]', 'float32', 2), 26: ('VA[VA]', 'float32', 2), 28: ('VAr[var]', 'float32', 2), 30: ('PF[Pct]', 'float32', 2), 32: ('WH[Wh]', 'float32', 2), 34: ('DCA[A]', 'float32', 2), 36: ('DCV[V]', 'float32', 2), 38: ('DCW[W]', 'float32', 2), 40: ('TmpCab[C]', 'float32', 2), 42: ('TmpSnk[C]', 'float32', 2), 44: ('TmpTrns[C]', 'float32', 2), 46: ('TmpOt[C]', 'float32', 2), 48: ('St', 'enum16', 1), 49: ('StVnd', 'enum16', 1), 50: ('Evt1', 'bitfield32', 2), 52: ('Evt2', 'bitfield32', 2), 54: ('EvtVnd1', 'bitfield32', 2), 56: ('EvtVnd2', 'bitfield32', 2), 58: ('EvtVnd3', 'bitfield32', 2), 60: ('EvtVnd4', 'bitfield32', 2)}),
	(112, 0): ("inverter_split_phase_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'float32', 2), 4: ('AphA[A]', 'float32', 2), 6: ('AphB[A]', 'float32', 2), 8: ('AphC[A]', 'float32', 2), 10: ('PPVphAB[V]', 'float32', 2), 12: ('PPVphBC[V]', 'float32', 2), 14: ('PPVphCA[V]', 'float32', 2), 16: ('PhVphA[V]', 'float32', 2), 18: ('PhVphB[V]', 'float32', 2), 20: ('PhVphC[V]', 'float32', 2), 22: ('W[W]', 'float32', 2), 24: ('Hz[Hz]', 'float32', 2), 26: ('VA[VA]', 'float32', 2), 28: ('VAr[var]', 'float32', 2), 30: ('PF[Pct]', 'float32', 2), 32: ('WH[Wh]', 'float32', 2), 34: ('DCA[A]', 'float32', 2), 36: ('DCV[V]', 'float32', 2), 38: ('DCW[W]', 'float32', 2), 40: ('TmpCab[C]', 'float32', 2), 42: ('TmpSnk[C]', 'float32', 2), 44: ('TmpTrns[C]', 'float32', 2), 46: ('TmpOt[C]', 'float32', 2), 48: ('St', 'enum16', 1), 49: ('StVnd', 'enum16', 1), 50: ('Evt1', 'bitfield32', 2), 52: ('Evt2', 'bitfield32', 2), 54: ('EvtVnd1', 'bitfield32', 2), 56: ('EvtVnd2', 'bitfield32', 2), 58: ('EvtVnd3', 'bitfield32', 2), 60: ('EvtVnd4', 'bitfield32', 2)}),
	(113, 0): ("inverter_three_phase_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'float32', 2), 4: ('AphA[A]', 'float32', 2), 6: ('AphB[A]', 'float32', 2), 8: ('AphC[A]', 'float32', 2), 10: ('PPVphAB[V]', 'float32', 2), 12: ('PPVphBC[V]', 'float32', 2), 14: ('PPVphCA[V]', 'float32', 2), 16: ('PhVphA[V]', 'float32', 2), 18: ('PhVphB[V]', 'float32', 2), 20: ('PhVphC[V]', 'float32', 2), 22: ('W[W]', 'float32', 2), 24: ('Hz[Hz]', 'float32', 2), 26: ('VA[VA]', 'float32', 2), 28: ('VAr[var]', 'float32', 2), 30: ('PF[Pct]', 'float32', 2), 32: ('WH[Wh]', 'float32', 2), 34: ('DCA[A]', 'float32', 2), 36: ('DCV[V]', 'float32', 2), 38: ('DCW[W]', 'float32', 2), 40: ('TmpCab[C]', 'float32', 2), 42: ('TmpSnk[C]', 'float32', 2), 44: ('TmpTrns[C]', 'float32', 2), 46: ('TmpOt[C]', 'float32', 2), 48: ('St', 'enum16', 1), 49: ('StVnd', 'enum16', 1), 50: ('Evt1', 'bitfield32', 2), 52: ('Evt2', 'bitfield32', 2), 54: ('EvtVnd1', 'bitfield32', 2), 56: ('EvtVnd2', 'bitfield32', 2), 58: ('EvtVnd3', 'bitfield32', 2), 60: ('EvtVnd4', 'bitfield32', 2)}),
	(12, 0): ("model_12", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 4), 6: ('CfgSt', 'enum16', 1), 7: ('ChgSt', 'bitfield16', 1), 8: ('Cap', 'bitfield16', 1), 9: ('Cfg', 'enum16', 1), 10: ('Ctl', 'enum16', 1), 11: ('Addr', 'string', 8), 19: ('Msk', 'string', 8), 27: ('Gw', 'string', 8), 35: ('DNS1', 'string', 8), 43: ('DNS2', 'string', 8), 51: ('NTP1', 'string', 12), 63: ('NTP2', 'string', 12), 75: ('DomNam', 'string', 12), 87: ('HostNam', 'string', 12), 99: ('Pad', 'pad', 1)}),
	(120, 0): ("nameplate", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DERTyp', 'enum16', 1), 3: ('WRtg[W]', 'uint16', 1), 4: ('WRtg_SF', 'sunssf', 1), 5: ('VARtg[VA]', 'uint16', 1), 6: ('VARtg_SF', 'sunssf', 1), 7: ('VArRtgQ1[var]', 'int16', 1), 8: ('VArRtgQ2[var]', 'int16', 1), 9: ('VArRtgQ3[var]', 'int16', 1), 10: ('VArRtgQ4[var]', 'int16', 1), 11: ('VArRtg_SF', 'sunssf', 1), 12: ('ARtg[A]', 'uint16', 1), 13: ('ARtg_SF', 'sunssf', 1), 14: ('PFRtgQ1[cos()]', 'int16', 1), 15: ('PFRtgQ2[cos()]', 'int16', 1), 16: ('PFRtgQ3[cos()]', 'int16', 1), 17: ('PFRtgQ4[cos()]', 'int16', 1), 18: ('PFRtg_SF', 'sunssf', 1), 19: ('WHRtg[Wh]', 'uint16', 1), 20: ('WHRtg_SF', 'sunssf', 1), 21: ('AhrRtg[AH]', 'uint16', 1), 22: ('AhrRtg_SF', 'sunssf', 1), 23: ('MaxChaRte[W]', 'uint16', 1), 24: ('MaxChaRte_SF', 'sunssf', 1), 25: ('MaxDisChaRte[W]', 'uint16', 1), 26: ('MaxDisChaRte_SF', 'sunssf', 1), 27: ('Pad', 'pad', 1)}),
	(121, 0): ("settings", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('WMax[W]', 'uint16', 1), 3: ('VRef[V]', 'uint16', 1), 4: ('VRefOfs[V]', 'int16', 1), 5: ('VMax[V]', 'uint16', 1), 6: ('VMin[V]', 'uint16', 1), 7: ('VAMax[VA]', 'uint16', 1), 8: ('VArMaxQ1[var]', 'int16', 1), 9: ('VArMaxQ2[var]', 'int16', 1), 10: ('VArMaxQ3[var]', 'int16', 1), 11: ('VArMaxQ4[var]', 'int16', 1), 12: ('WGra[% WMax/sec]', 'uint16', 1), 13: ('PFMinQ1[cos()]', 'int16', 1), 14: ('PFMinQ2[cos()]', 'int16', 1), 15: ('PFMinQ3[cos()]', 'int16', 1), 16: ('PFMinQ4[cos()]', 'int16', 1), 17: ('VArAct', 'enum16', 1), 18: ('ClcTotVA', 'enum16', 1), 19: ('MaxRmpRte[% WGra]', 'uint16', 1), 20: ('ECPNomHz[Hz]', 'uint16', 1), 21: ('ConnPh', 'enum16', 1), 22: ('WMax_SF', 'sunssf', 1), 23: ('VRef_SF', 'sunssf', 1), 24: ('VRefOfs_SF', 'sunssf', 1), 25: ('VMinMax_SF', 'sunssf', 1), 26: ('VAMax_SF', 'sunssf', 1), 27: ('VArMax_SF', 'sunssf', 1), 28: ('WGra_SF', 'sunssf', 1), 29: ('PFMin_SF', 'sunssf', 1), 30: ('MaxRmpRte_SF', 'sunssf', 1), 31: ('ECPNomHz_SF', 'sunssf', 1)}),
	(122, 0): ("status", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('PVConn', 'bitfield16', 1), 3: ('StorConn', 'bitfield16', 1), 4: ('ECPConn', 'bitfield16', 1), 5: ('ActWh[Wh]', 'acc64', 4), 9: ('ActVAh[VAh]', 'acc64', 4), 13: ('ActVArhQ1[varh]', 'acc64', 4), 17: ('ActVArhQ2[varh]', 'acc64', 4), 21: ('ActVArhQ3[varh]', 'acc64', 4), 25: ('ActVArhQ4[varh]', 'acc64', 4), 29: ('VArAval[var]', 'int16', 1), 30: ('VArAval_SF', 'sunssf', 1), 31: ('WAval[var]', 'uint16', 1), 32: ('WAval_SF', 'sunssf', 1), 33: ('StSetLimMsk', 'bitfield32', 2), 35: ('StActCtl', 'bitfield32', 2), 37: ('TmSrc', 'string', 4), 41: ('Tms[Secs]', 'uint32', 2), 43: ('RtSt', 'bitfield16', 1), 44: ('Ris[ohms]', 'uint16', 1), 45: ('Ris_SF', 'sunssf', 1)}),
	(123, 0): ("controls", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Conn_WinTms[Secs]', 'uint16', 1), 3: ('Conn_RvrtTms[Secs]', 'uint16', 1), 4: ('Conn', 'enum16', 1), 5: ('WMaxLimPct[% WMax]', 'uint16', 1), 6: ('WMaxLimPct_WinTms[Secs]', 'uint16', 1), 7: ('WMaxLimPct_RvrtTms[Secs]', 'uint16', 1), 8: ('WMaxLimPct_RmpTms[Secs]', 'uint16', 1), 9: ('WMaxLim_Ena', 'enum16', 1), 10: ('OutPFSet[cos()]', 'int16', 1), 11: ('OutPFSet_WinTms[Secs]', 'uint16', 1), 12: ('OutPFSet_RvrtTms[Secs]', 'uint16', 1), 13: ('OutPFSet_RmpTms[Secs]', 'uint16', 1), 14: ('OutPFSet_Ena', 'enum16', 1), 15: ('VArWMaxPct[% WMax]', 'int16', 1), 16: ('VArMaxPct[% VArMax]', 'int16', 1), 17: ('VArAvalPct[% VArAval]', 'int16', 1), 18: ('VArPct_WinTms[Secs]', 'uint16', 1), 19: ('VArPct_RvrtTms[Secs]', 'uint16', 1), 20: ('VArPct_RmpTms[Secs]', 'uint16', 1), 21: ('VArPct_Mod', 'enum16', 1), 22: ('VArPct_Ena', 'enum16', 1), 23: ('WMaxLimPct_SF', 'sunssf', 1), 24: ('OutPFSet_SF', 'sunssf', 1), 25: ('VArPct_SF', 'sunssf', 1)}),
	(124, 0): ("storage_basic", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('WChaMax[W]', 'uint16', 1), 3: ('WChaGra[% WChaMax/sec]', 'uint16', 1), 4: ('WDisChaGra[% WChaMax/sec]', 'uint16', 1), 5: ('StorCtl_Mod', 'bitfield16', 1), 6: ('VAChaMax[VA]', 'uint16', 1), 7: ('MinRsvPct[% WChaMax]', 'uint16', 1), 8: ('ChaState[% AhrRtg]', 'uint16', 1), 9: ('StorAval[AH]', 'uint16', 1), 10: ('InBatV[V]', 'uint16', 1), 11: ('ChaSt', 'enum16', 1), 12: ('OutWRte[% WDisChaMax]', 'int16', 1), 13: ('InWRte[ % WChaMax]', 'int16', 1), 14: ('InOutWRte_WinTms[Secs]', 'uint16', 1), 15: ('InOutWRte_RvrtTms[Secs]', 'uint16', 1), 16: ('InOutWRte_RmpTms[Secs]', 'uint16', 1), 17: ('ChaGriSet', 'enum16', 1), 18: ('WChaMax_SF', 'sunssf', 1), 19: ('WChaDisChaGra_SF', 'sunssf', 1), 20: ('VAChaMax_SF', 'sunssf', 1), 21: ('MinRsvPct_SF', 'sunssf', 1), 22: ('ChaState_SF', 'sunssf', 1), 23: ('StorAval_SF', 'sunssf', 1), 24: ('InBatV_SF', 'sunssf', 1), 25: ('InOutWRte_SF', 'sunssf', 1)}),
	(125, 0): ("pricing", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ModEna', 'bitfield16', 1), 3: ('SigType', 'enum16', 1), 4: ('Sig', 'int16', 1), 5: ('WinTms[Secs]', 'uint16', 1), 6: ('RvtTms[Secs]', 'uint16', 1), 7: ('RmpTms[Secs]', 'uint16', 1), 8: ('Sig_SF', 'sunssf', 1), 9: ('Pad', 'pad', 1)}),
	(126, 0): ("volt_var", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('V_SF', 'sunssf', 1), 10: ('DeptRef_SF', 'sunssf', 1), 11: ('RmpIncDec_SF', 'sunssf', 1)}),
	(127, 0): ("freq_watt_param", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('WGra[% PM/Hz]', 'uint16', 1), 3: ('HzStr[Hz]', 'int16', 1), 4: ('HzStop[Hz]', 'int16', 1), 5: ('HysEna', 'bitfield16', 1), 6: ('ModEna', 'bitfield16', 1), 7: ('HzStopWGra[% WMax/min]', 'uint16', 1), 8: ('WGra_SF', 'sunssf', 1), 9: ('HzStrStop_SF', 'sunssf', 1), 10: ('RmpIncDec_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(128, 0): ("reactive_current", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ArGraMod', 'enum16', 1), 3: ('ArGraSag[%ARtg/%dV]', 'uint16', 1), 4: ('ArGraSwell[%ARtg/%dV]', 'uint16', 1), 5: ('ModEna', 'bitfield16', 1), 6: ('FilTms[Secs]', 'uint16', 1), 7: ('DbVMin[% VRef]', 'uint16', 1), 8: ('DbVMax[% VRef]', 'uint16', 1), 9: ('BlkZnV[% VRef]', 'uint16', 1), 10: ('HysBlkZnV[% VRef]', 'uint16', 1), 11: ('BlkZnTmms[mSecs]', 'uint16', 1), 12: ('HoldTmms[mSecs]', 'uint16', 1), 13: ('ArGra_SF', 'sunssf', 1), 14: ('VRefPct_SF', 'sunssf', 1), 15: ('Pad', 'pad', 1)}),
	(129, 0): ("lvrt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('V_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(13, 0): ("model_13", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 4), 6: ('CfgSt', 'enum16', 1), 7: ('ChgSt', 'bitfield16', 1), 8: ('Cap', 'bitfield16', 1), 9: ('Cfg', 'enum16', 1), 10: ('Ctl', 'enum16', 1), 11: ('Addr', 'string', 20), 31: ('CIDR', 'string', 20), 51: ('Gw', 'string', 20), 71: ('DNS1', 'string', 20), 91: ('DNS2', 'string', 20), 111: ('NTP1', 'string', 20), 131: ('NTP2', 'string', 20), 151: ('DomNam', 'string', 12), 163: ('HostNam', 'string', 12), 175: ('Pad', 'pad', 1)}),
	(130, 0): ("hvrt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('V_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(131, 0): ("watt_pf", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('W_SF', 'sunssf', 1), 10: ('PF_SF', 'sunssf', 1), 11: ('RmpIncDec_SF', 'sunssf', 1)}),
	(132, 0): ("volt_watt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('V_SF', 'sunssf', 1), 10: ('DeptRef_SF', 'sunssf', 1), 11: ('RmpIncDec_SF', 'sunssf', 1)}),
	(133, 0): ("schedule", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActSchd', 'bitfield32', 2), 4: ('ModEna', 'bitfield16', 1), 5: ('NSchd', 'uint16', 1), 6: ('NPts', 'uint16', 1), 7: ('Pad', 'pad', 1)}),
	(134, 0): ("freq_watt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Hz_SF[SF]', 'sunssf', 1), 10: ('W_SF[SF]', 'sunssf', 1), 11: ('RmpIncDec_SF[SF]', 'sunssf', 1)}),
	(135, 0): ("lfrt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('Hz_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(136, 0): ("hfrt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('Hz_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(137, 0): ("lvrtc", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('V_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(138, 0): ("hvrtc", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('V_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(139, 0): ("lvrtx", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('V_SF', 'sunssf', 1), 11: ('CrvType', 'enum16', 1)}),
	(14, 0): ("model_14", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 4), 6: ('Cap', 'bitfield16', 1), 7: ('Cfg', 'enum16', 1), 8: ('Typ', 'bitfield16', 1), 9: ('Addr', 'string', 20), 29: ('Port', 'uint16', 1), 30: ('User', 'string', 12), 42: ('Pw', 'string', 12)}),
	(140, 0): ("hvrtx", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('V_SF', 'sunssf', 1), 11: ('CrvType', 'enum16', 1)}),
	(141, 0): ("lfrtc", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('Hz_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(142, 0): ("hfrtc", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('Hz_SF', 'sunssf', 1), 11: ('Pad', 'pad', 1)}),
	(143, 0): ("lfrtx", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('Hz_SF', 'sunssf', 1), 11: ('CrvType', 'enum16', 1)}),
	(144, 0): ("hfrtx", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ActCrv', 'uint16', 1), 3: ('ModEna', 'bitfield16', 1), 4: ('WinTms[Secs]', 'uint16', 1), 5: ('RvrtTms[Secs]', 'uint16', 1), 6: ('RmpTms[Secs]', 'uint16', 1), 7: ('NCrv', 'uint16', 1), 8: ('NPt', 'uint16', 1), 9: ('Tms_SF', 'sunssf', 1), 10: ('Hz_SF', 'sunssf', 1), 11: ('CrvType', 'enum16', 1)}),
	(145, 0): ("ext_settings", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('NomRmpUpRte[Pct]', 'uint16', 1), 3: ('NomRmpDnRte[Pct]', 'uint16', 1), 4: ('EmgRmpUpRte[Pct]', 'uint16', 1), 5: ('EmgRmpDnRte[Pct]', 'uint16', 1), 6: ('ConnRmpUpRte[Pct]', 'uint16', 1), 7: ('ConnRmpDnRte[Pct]', 'uint16', 1), 8: ('AGra[Pct]', 'uint16', 1), 9: ('Rmp_SF', 'sunssf', 1)}),
	(15, 0): ("model_15", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Clr', 'uint16', 1), 3: ('InCnt', 'acc32', 2), 5: ('InUcCnt', 'acc32', 2), 7: ('InNUcCnt', 'acc32', 2), 9: ('InDscCnt', 'acc32', 2), 11: ('InErrCnt', 'acc32', 2), 13: ('InUnkCnt', 'acc32', 2), 15: ('OutCnt', 'acc32', 2), 17: ('OutUcCnt', 'acc32', 2), 19: ('OutNUcCnt', 'acc32', 2), 21: ('OutDscCnt', 'acc32', 2), 23: ('OutErrCnt', 'acc32', 2), 25: ('Pad', 'pad', 1)}),
	(16, 0): ("model_16", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 4), 6: ('Cfg', 'enum16', 1), 7: ('Ctl', 'bitfield16', 1), 8: ('Addr', 'string', 8), 16: ('Msk', 'string', 8), 24: ('Gw', 'string', 8), 32: ('DNS1', 'string', 8), 40: ('DNS2', 'string', 8), 48: ('MAC', 'eui48', 4), 52: ('LnkCtl', 'bitfield16', 1), 53: ('Pad', 'pad', 1)}),
	(160, 0): ("mppt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCV_SF', 'sunssf', 1), 4: ('DCW_SF', 'sunssf', 1), 5: ('DCWH_SF', 'sunssf', 1), 6: ('Evt', 'bitfield32', 2), 8: ('N', 'count', 1), 9: ('TmsPer', 'uint16', 1)}),
	(160, 1): ("mppt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCV_SF', 'sunssf', 1), 4: ('DCW_SF', 'sunssf', 1), 5: ('DCWH_SF', 'sunssf', 1), 6: ('Evt', 'bitfield32', 2), 8: ('N', 'count', 1), 9: ('TmsPer', 'uint16', 1), 10: ('ID', 'uint16', 1), 11: ('IDStr', 'string', 8), 19: ('DCA[A]', 'uint16', 1), 20: ('DCV[V]', 'uint16', 1), 21: ('DCW[W]', 'uint16', 1), 22: ('DCWH[Wh]', 'acc32', 2), 24: ('Tms[Secs]', 'uint32', 2), 26: ('Tmp[C]', 'int16', 1), 27: ('DCSt', 'enum16', 1), 28: ('DCEvt', 'bitfield32', 2)}),
	(17, 0): ("model_17", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 4), 6: ('Rte[bps]', 'uint32', 2), 8: ('Bits', 'uint16', 1), 9: ('Pty', 'enum16', 1), 10: ('Dup', 'enum16', 1), 11: ('Flw', 'enum16', 1), 12: ('Typ', 'enum16', 1), 13: ('Pcol', 'enum16', 1)}),
	(18, 0): ("model_18", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 4), 6: ('IMEI', 'uint32', 2), 8: ('APN', 'string', 4), 12: ('Num', 'string', 6), 18: ('Pin', 'string', 6)}),
	(19, 0): ("model_19", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 4), 6: ('Rte[bps]', 'uint32', 2), 8: ('Bits', 'uint16', 1), 9: ('Pty', 'enum16', 1), 10: ('Dup', 'enum16', 1), 11: ('Flw', 'enum16', 1), 12: ('Auth', 'enum16', 1), 13: ('UsrNam', 'string', 12), 25: ('Pw', 'string', 6), 31: ('Pad', 'pad', 1)}),
	(2, 0): ("aggregator", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('AID', 'uint16', 1), 3: ('N', 'uint16', 1), 4: ('UN', 'uint16', 1), 5: ('St', 'enum16', 1), 6: ('StVnd', 'enum16', 1), 7: ('Evt', 'bitfield32', 2), 9: ('EvtVnd', 'bitfield32', 2), 11: ('Ctl', 'enum16', 1), 12: ('CtlVnd', 'enum32', 2), 14: ('CtlVl', 'enum32', 2)}),
	(201, 0): ("ac_meter_an_or_ab", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'int16', 1), 3: ('AphA[A]', 'int16', 1), 4: ('AphB[A]', 'int16', 1), 5: ('AphC[A]', 'int16', 1), 6: ('A_SF', 'sunssf', 1), 7: ('PhV[V]', 'int16', 1), 8: ('PhVphA[V]', 'int16', 1), 9: ('PhVphB[V]', 'int16', 1), 10: ('PhVphC[V]', 'int16', 1), 11: ('PPV[V]', 'int16', 1), 12: ('PPVphAB[V]', 'int16', 1), 13: ('PPVphBC[V]', 'int16', 1), 14: ('PPVphCA[V]', 'int16', 1), 15: ('V_SF', 'sunssf', 1), 16: ('Hz[Hz]', 'int16', 1), 17: ('Hz_SF', 'sunssf', 1), 18: ('W[W]', 'int16', 1), 19: ('WphA[W]', 'int16', 1), 20: ('WphB[W]', 'int16', 1), 21: ('WphC[W]', 'int16', 1), 22: ('W_SF', 'sunssf', 1), 23: ('VA[VA]', 'int16', 1), 24: ('VAphA[VA]', 'int16', 1), 25: ('VAphB[VA]', 'int16', 1), 26: ('VAphC[VA]', 'int16', 1), 27: ('VA_SF', 'sunssf', 1), 28: ('VAR[var]', 'int16', 1), 29: ('VARphA[var]', 'int16', 1), 30: ('VARphB[var]', 'int16', 1), 31: ('VARphC[var]', 'int16', 1), 32: ('VAR_SF', 'sunssf', 1), 33: ('PF[Pct]', 'int16', 1), 34: ('PFphA[Pct]', 'int16', 1), 35: ('PFphB[Pct]', 'int16', 1), 36: ('PFphC[Pct]', 'int16', 1), 37: ('PF_SF', 'sunssf', 1), 38: ('TotWhExp[Wh]', 'acc32', 2), 40: ('TotWhExpPhA[Wh]', 'acc32', 2), 42: ('TotWhExpPhB[Wh]', 'acc32', 2), 44: ('TotWhExpPhC[Wh]', 'acc32', 2), 46: ('TotWhImp[Wh]', 'acc32', 2), 48: ('TotWhImpPhA[Wh]', 'acc32', 2), 50: ('TotWhImpPhB[Wh]', 'acc32', 2), 52: ('TotWhImpPhC[Wh]', 'acc32', 2), 54: ('TotWh_SF', 'sunssf', 1), 55: ('TotVAhExp[VAh]', 'acc32', 2), 57: ('TotVAhExpPhA[VAh]', 'acc32', 2), 59: ('TotVAhExpPhB[VAh]', 'acc32', 2), 61: ('TotVAhExpPhC[VAh]', 'acc32', 2), 63: ('TotVAhImp[VAh]', 'acc32', 2), 65: ('TotVAhImpPhA[VAh]', 'acc32', 2), 67: ('TotVAhImpPhB[VAh]', 'acc32', 2), 69: ('TotVAhImpPhC[VAh]', 'acc32', 2), 71: ('TotVAh_SF', 'sunssf', 1), 72: ('TotVArhImpQ1[varh]', 'acc32', 2), 74: ('TotVArhImpQ1PhA[varh]', 'acc32', 2), 76: ('TotVArhImpQ1PhB[varh]', 'acc32', 2), 78: ('TotVArhImpQ1PhC[varh]', 'acc32', 2), 80: ('TotVArhImpQ2[varh]', 'acc32', 2), 82: ('TotVArhImpQ2PhA[varh]', 'acc32', 2), 84: ('TotVArhImpQ2PhB[varh]', 'acc32', 2), 86: ('TotVArhImpQ2PhC[varh]', 'acc32', 2), 88: ('TotVArhExpQ3[varh]', 'acc32', 2), 90: ('TotVArhExpQ3PhA[varh]', 'acc32', 2), 92: ('TotVArhExpQ3PhB[varh]', 'acc32', 2), 94: ('TotVArhExpQ3PhC[varh]', 'acc32', 2), 96: ('TotVArhExpQ4[varh]', 'acc32', 2), 98: ('TotVArhExpQ4PhA[varh]', 'acc32', 2), 100: ('TotVArhExpQ4PhB[varh]', 'acc32', 2), 102: ('TotVArhExpQ4PhC[varh]', 'acc32', 2), 104: ('TotVArh_SF', 'sunssf', 1), 105: ('Evt', 'bitfield32', 2)}),
	(202, 0): ("ac_meter_abn", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'int16', 1), 3: ('AphA[A]', 'int16', 1), 4: ('AphB[A]', 'int16', 1), 5: ('AphC[A]', 'int16', 1), 6: ('A_SF', 'sunssf', 1), 7: ('PhV[V]', 'int16', 1), 8: ('PhVphA[V]', 'int16', 1), 9: ('PhVphB[V]', 'int16', 1), 10: ('PhVphC[V]', 'int16', 1), 11: ('PPV[V]', 'int16', 1), 12: ('PhVphAB[V]', 'int16', 1), 13: ('PhVphBC[V]', 'int16', 1), 14: ('PhVphCA[V]', 'int16', 1), 15: ('V_SF', 'sunssf', 1), 16: ('Hz[Hz]', 'int16', 1), 17: ('Hz_SF', 'sunssf', 1), 18: ('W[W]', 'int16', 1), 19: ('WphA[W]', 'int16', 1), 20: ('WphB[W]', 'int16', 1), 21: ('WphC[W]', 'int16', 1), 22: ('W_SF', 'sunssf', 1), 23: ('VA[VA]', 'int16', 1), 24: ('VAphA[VA]', 'int16', 1), 25: ('VAphB[VA]', 'int16', 1), 26: ('VAphC[VA]', 'int16', 1), 27: ('VA_SF', 'sunssf', 1), 28: ('VAR[var]', 'int16', 1), 29: ('VARphA[var]', 'int16', 1), 30: ('VARphB[var]', 'int16', 1), 31: ('VARphC[var]', 'int16', 1), 32: ('VAR_SF', 'sunssf', 1), 33: ('PF[Pct]', 'int16', 1), 34: ('PFphA[Pct]', 'int16', 1), 35: ('PFphB[Pct]', 'int16', 1), 36: ('PFphC[Pct]', 'int16', 1), 37: ('PF_SF', 'sunssf', 1), 38: ('TotWhExp[Wh]', 'acc32', 2), 40: ('TotWhExpPhA[Wh]', 'acc32', 2), 42: ('TotWhExpPhB[Wh]', 'acc32', 2), 44: ('TotWhExpPhC[Wh]', 'acc32', 2), 46: ('TotWhImp[Wh]', 'acc32', 2), 48: ('TotWhImpPhA[Wh]', 'acc32', 2), 50: ('TotWhImpPhB[Wh]', 'acc32', 2), 52: ('TotWhImpPhC[Wh]', 'acc32', 2), 54: ('TotWh_SF', 'sunssf', 1), 55: ('TotVAhExp[VAh]', 'acc32', 2), 57: ('TotVAhExpPhA[VAh]', 'acc32', 2), 59: ('TotVAhExpPhB[VAh]', 'acc32', 2), 61: ('TotVAhExpPhC[VAh]', 'acc32', 2), 63: ('TotVAhImp[VAh]', 'acc32', 2), 65: ('TotVAhImpPhA[VAh]', 'acc32', 2), 67: ('TotVAhImpPhB[VAh]', 'acc32', 2), 69: ('TotVAhImpPhC[VAh]', 'acc32', 2), 71: ('TotVAh_SF', 'sunssf', 1), 72: ('TotVArhImpQ1[varh]', 'acc32', 2), 74: ('TotVArhImpQ1PhA[varh]', 'acc32', 2), 76: ('TotVArhImpQ1PhB[varh]', 'acc32', 2), 78: ('TotVArhImpQ1PhC[varh]', 'acc32', 2), 80: ('TotVArhImpQ2[varh]', 'acc32', 2), 82: ('TotVArhImpQ2PhA[varh]', 'acc32', 2), 84: ('TotVArhImpQ2PhB[varh]', 'acc32', 2), 86: ('TotVArhImpQ2PhC[varh]', 'acc32', 2), 88: ('TotVArhExpQ3[varh]', 'acc32', 2), 90: ('TotVArhExpQ3PhA[varh]', 'acc32', 2), 92: ('TotVArhExpQ3PhB[varh]', 'acc32', 2), 94: ('TotVArhExpQ3PhC[varh]', 'acc32', 2), 96: ('TotVArhExpQ4[varh]', 'acc32', 2), 98: ('TotVArhExpQ4PhA[varh]', 'acc32', 2), 100: ('TotVArhExpQ4PhB[varh]', 'acc32', 2), 102: ('TotVArhExpQ4PhC[varh]', 'acc32', 2), 104: ('TotVArh_SF', 'sunssf', 1), 105: ('Evt', 'bitfield32', 2)}),
	(203, 0): ("ac_meter_abcn", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'int16', 1), 3: ('AphA[A]', 'int16', 1), 4: ('AphB[A]', 'int16', 1), 5: ('AphC[A]', 'int16', 1), 6: ('A_SF', 'sunssf', 1), 7: ('PhV[V]', 'int16', 1), 8: ('PhVphA[V]', 'int16', 1), 9: ('PhVphB[V]', 'int16', 1), 10: ('PhVphC[V]', 'int16', 1), 11: ('PPV[V]', 'int16', 1), 12: ('PhVphAB[V]', 'int16', 1), 13: ('PhVphBC[V]', 'int16', 1), 14: ('PhVphCA[V]', 'int16', 1), 15: ('V_SF', 'sunssf', 1), 16: ('Hz[Hz]', 'int16', 1), 17: ('Hz_SF', 'sunssf', 1), 18: ('W[W]', 'int16', 1), 19: ('WphA[W]', 'int16', 1), 20: ('WphB[W]', 'int16', 1), 21: ('WphC[W]', 'int16', 1), 22: ('W_SF', 'sunssf', 1), 23: ('VA[VA]', 'int16', 1), 24: ('VAphA[VA]', 'int16', 1), 25: ('VAphB[VA]', 'int16', 1), 26: ('VAphC[VA]', 'int16', 1), 27: ('VA_SF', 'sunssf', 1), 28: ('VAR[var]', 'int16', 1), 29: ('VARphA[var]', 'int16', 1), 30: ('VARphB[var]', 'int16', 1), 31: ('VARphC[var]', 'int16', 1), 32: ('VAR_SF', 'sunssf', 1), 33: ('PF[Pct]', 'int16', 1), 34: ('PFphA[Pct]', 'int16', 1), 35: ('PFphB[Pct]', 'int16', 1), 36: ('PFphC[Pct]', 'int16', 1), 37: ('PF_SF', 'sunssf', 1), 38: ('TotWhExp[Wh]', 'acc32', 2), 40: ('TotWhExpPhA[Wh]', 'acc32', 2), 42: ('TotWhExpPhB[Wh]', 'acc32', 2), 44: ('TotWhExpPhC[Wh]', 'acc32', 2), 46: ('TotWhImp[Wh]', 'acc32', 2), 48: ('TotWhImpPhA[Wh]', 'acc32', 2), 50: ('TotWhImpPhB[Wh]', 'acc32', 2), 52: ('TotWhImpPhC[Wh]', 'acc32', 2), 54: ('TotWh_SF', 'sunssf', 1), 55: ('TotVAhExp[VAh]', 'acc32', 2), 57: ('TotVAhExpPhA[VAh]', 'acc32', 2), 59: ('TotVAhExpPhB[VAh]', 'acc32', 2), 61: ('TotVAhExpPhC[VAh]', 'acc32', 2), 63: ('TotVAhImp[VAh]', 'acc32', 2), 65: ('TotVAhImpPhA[VAh]', 'acc32', 2), 67: ('TotVAhImpPhB[VAh]', 'acc32', 2), 69: ('TotVAhImpPhC[VAh]', 'acc32', 2), 71: ('TotVAh_SF', 'sunssf', 1), 72: ('TotVArhImpQ1[varh]', 'acc32', 2), 74: ('TotVArhImpQ1PhA[varh]', 'acc32', 2), 76: ('TotVArhImpQ1PhB[varh]', 'acc32', 2), 78: ('TotVArhImpQ1PhC[varh]', 'acc32', 2), 80: ('TotVArhImpQ2[varh]', 'acc32', 2), 82: ('TotVArhImpQ2PhA[varh]', 'acc32', 2), 84: ('TotVArhImpQ2PhB[varh]', 'acc32', 2), 86: ('TotVArhImpQ2PhC[varh]', 'acc32', 2), 88: ('TotVArhExpQ3[varh]', 'acc32', 2), 90: ('TotVArhExpQ3PhA[varh]', 'acc32', 2), 92: ('TotVArhExpQ3PhB[varh]', 'acc32', 2), 94: ('TotVArhExpQ3PhC[varh]', 'acc32', 2), 96: ('TotVArhExpQ4[varh]', 'acc32', 2), 98: ('TotVArhExpQ4PhA[varh]', 'acc32', 2), 100: ('TotVArhExpQ4PhB[varh]', 'acc32', 2), 102: ('TotVArhExpQ4PhC[varh]', 'acc32', 2), 104: ('TotVArh_SF', 'sunssf', 1), 105: ('Evt', 'bitfield32', 2)}),
	(204, 0): ("ac_meter_abc", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'int16', 1), 3: ('AphA[A]', 'int16', 1), 4: ('AphB[A]', 'int16', 1), 5: ('AphC[A]', 'int16', 1), 6: ('A_SF', 'sunssf', 1), 7: ('PhV[V]', 'int16', 1), 8: ('PhVphA[V]', 'int16', 1), 9: ('PhVphB[V]', 'int16', 1), 10: ('PhVphC[V]', 'int16', 1), 11: ('PPV[V]', 'int16', 1), 12: ('PhVphAB[V]', 'int16', 1), 13: ('PhVphBC[V]', 'int16', 1), 14: ('PhVphCA[V]', 'int16', 1), 15: ('V_SF', 'sunssf', 1), 16: ('Hz[Hz]', 'int16', 1), 17: ('Hz_SF', 'sunssf', 1), 18: ('W[W]', 'int16', 1), 19: ('WphA[W]', 'int16', 1), 20: ('WphB[W]', 'int16', 1), 21: ('WphC[W]', 'int16', 1), 22: ('W_SF', 'sunssf', 1), 23: ('VA[VA]', 'int16', 1), 24: ('VAphA[VA]', 'int16', 1), 25: ('VAphB[VA]', 'int16', 1), 26: ('VAphC[VA]', 'int16', 1), 27: ('VA_SF', 'sunssf', 1), 28: ('VAR[var]', 'int16', 1), 29: ('VARphA[var]', 'int16', 1), 30: ('VARphB[var]', 'int16', 1), 31: ('VARphC[var]', 'int16', 1), 32: ('VAR_SF', 'sunssf', 1), 33: ('PF[Pct]', 'int16', 1), 34: ('PFphA[Pct]', 'int16', 1), 35: ('PFphB[Pct]', 'int16', 1), 36: ('PFphC[Pct]', 'int16', 1), 37: ('PF_SF', 'sunssf', 1), 38: ('TotWhExp[Wh]', 'acc32', 2), 40: ('TotWhExpPhA[Wh]', 'acc32', 2), 42: ('TotWhExpPhB[Wh]', 'acc32', 2), 44: ('TotWhExpPhC[Wh]', 'acc32', 2), 46: ('TotWhImp[Wh]', 'acc32', 2), 48: ('TotWhImpPhA[Wh]', 'acc32', 2), 50: ('TotWhImpPhB[Wh]', 'acc32', 2), 52: ('TotWhImpPhC[Wh]', 'acc32', 2), 54: ('TotWh_SF', 'sunssf', 1), 55: ('TotVAhExp[VAh]', 'acc32', 2), 57: ('TotVAhExpPhA[VAh]', 'acc32', 2), 59: ('TotVAhExpPhB[VAh]', 'acc32', 2), 61: ('TotVAhExpPhC[VAh]', 'acc32', 2), 63: ('TotVAhImp[VAh]', 'acc32', 2), 65: ('TotVAhImpPhA[VAh]', 'acc32', 2), 67: ('TotVAhImpPhB[VAh]', 'acc32', 2), 69: ('TotVAhImpPhC[VAh]', 'acc32', 2), 71: ('TotVAh_SF', 'sunssf', 1), 72: ('TotVArhImpQ1[varh]', 'acc32', 2), 74: ('TotVArhImpQ1PhA[varh]', 'acc32', 2), 76: ('TotVArhImpQ1PhB[varh]', 'acc32', 2), 78: ('TotVArhImpQ1PhC[varh]', 'acc32', 2), 80: ('TotVArhImpQ2[varh]', 'acc32', 2), 82: ('TotVArhImpQ2PhA[varh]', 'acc32', 2), 84: ('TotVArhImpQ2PhB[varh]', 'acc32', 2), 86: ('TotVArhImpQ2PhC[varh]', 'acc32', 2), 88: ('TotVArhExpQ3[varh]', 'acc32', 2), 90: ('TotVArhExpQ3PhA[varh]', 'acc32', 2), 92: ('TotVArhExpQ3PhB[varh]', 'acc32', 2), 94: ('TotVArhExpQ3PhC[varh]', 'acc32', 2), 96: ('TotVArhExpQ4[varh]', 'acc32', 2), 98: ('TotVArhExpQ4PhA[varh]', 'acc32', 2), 100: ('TotVArhExpQ4PhB[varh]', 'acc32', 2), 102: ('TotVArhExpQ4PhC[varh]', 'acc32', 2), 104: ('TotVArh_SF', 'sunssf', 1), 105: ('Evt', 'bitfield32', 2)}),
	(211, 0): ("ac_meter_an_or_ab_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'float32', 2), 4: ('AphA[A]', 'float32', 2), 6: ('AphB[A]', 'float32', 2), 8: ('AphC[A]', 'float32', 2), 10: ('PhV[V]', 'float32', 2), 12: ('PhVphA[V]', 'float32', 2), 14: ('PhVphB[V]', 'float32', 2), 16: ('PhVphC[V]', 'float32', 2), 18: ('PPV[V]', 'float32', 2), 20: ('PPVphAB[V]', 'float32', 2), 22: ('PPVphBC[V]', 'float32', 2), 24: ('PPVphCA[V]', 'float32', 2), 26: ('Hz[Hz]', 'float32', 2), 28: ('W[W]', 'float32', 2), 30: ('WphA[W]', 'float32', 2), 32: ('WphB[W]', 'float32', 2), 34: ('WphC[W]', 'float32', 2), 36: ('VA[VA]', 'float32', 2), 38: ('VAphA[VA]', 'float32', 2), 40: ('VAphB[VA]', 'float32', 2), 42: ('VAphC[VA]', 'float32', 2), 44: ('VAR[var]', 'float32', 2), 46: ('VARphA[var]', 'float32', 2), 48: ('VARphB[var]', 'float32', 2), 50: ('VARphC[var]', 'float32', 2), 52: ('PF[PF]', 'float32', 2), 54: ('PFphA[PF]', 'float32', 2), 56: ('PFphB[PF]', 'float32', 2), 58: ('PFphC[PF]', 'float32', 2), 60: ('TotWhExp[Wh]', 'float32', 2), 62: ('TotWhExpPhA[Wh]', 'float32', 2), 64: ('TotWhExpPhB[Wh]', 'float32', 2), 66: ('TotWhExpPhC[Wh]', 'float32', 2), 68: ('TotWhImp[Wh]', 'float32', 2), 70: ('TotWhImpPhA[Wh]', 'float32', 2), 72: ('TotWhImpPhB[Wh]', 'float32', 2), 74: ('TotWhImpPhC[Wh]', 'float32', 2), 76: ('TotVAhExp[VAh]', 'float32', 2), 78: ('TotVAhExpPhA[VAh]', 'float32', 2), 80: ('TotVAhExpPhB[VAh]', 'float32', 2), 82: ('TotVAhExpPhC[VAh]', 'float32', 2), 84: ('TotVAhImp[VAh]', 'float32', 2), 86: ('TotVAhImpPhA[VAh]', 'float32', 2), 88: ('TotVAhImpPhB[VAh]', 'float32', 2), 90: ('TotVAhImpPhC[VAh]', 'float32', 2), 92: ('TotVArhImpQ1[varh]', 'float32', 2), 94: ('TotVArhImpQ1phA[varh]', 'float32', 2), 96: ('TotVArhImpQ1phB[varh]', 'float32', 2), 98: ('TotVArhImpQ1phC[varh]', 'float32', 2), 100: ('TotVArhImpQ2[varh]', 'float32', 2), 102: ('TotVArhImpQ2phA[varh]', 'float32', 2), 104: ('TotVArhImpQ2phB[varh]', 'float32', 2), 106: ('TotVArhImpQ2phC[varh]', 'float32', 2), 108: ('TotVArhExpQ3[varh]', 'float32', 2), 110: ('TotVArhExpQ3phA[varh]', 'float32', 2), 112: ('TotVArhExpQ3phB[varh]', 'float32', 2), 114: ('TotVArhExpQ3phC[varh]', 'float32', 2), 116: ('TotVArhExpQ4[varh]', 'float32', 2), 118: ('TotVArhExpQ4phA[varh]', 'float32', 2), 120: ('TotVArhExpQ4phB[varh]', 'float32', 2), 122: ('TotVArhExpQ4phC[varh]', 'float32', 2), 124: ('Evt', 'bitfield32', 2)}),
	(212, 0): ("ac_meter_abn_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'float32', 2), 4: ('AphA[A]', 'float32', 2), 6: ('AphB[A]', 'float32', 2), 8: ('AphC[A]', 'float32', 2), 10: ('PhV[V]', 'float32', 2), 12: ('PhVphA[V]', 'float32', 2), 14: ('PhVphB[V]', 'float32', 2), 16: ('PhVphC[V]', 'float32', 2), 18: ('PPV[V]', 'float32', 2), 20: ('PPVphAB[V]', 'float32', 2), 22: ('PPVphBC[V]', 'float32', 2), 24: ('PPVphCA[V]', 'float32', 2), 26: ('Hz[Hz]', 'float32', 2), 28: ('W[W]', 'float32', 2), 30: ('WphA[W]', 'float32', 2), 32: ('WphB[W]', 'float32', 2), 34: ('WphC[W]', 'float32', 2), 36: ('VA[VA]', 'float32', 2), 38: ('VAphA[VA]', 'float32', 2), 40: ('VAphB[VA]', 'float32', 2), 42: ('VAphC[VA]', 'float32', 2), 44: ('VAR[var]', 'float32', 2), 46: ('VARphA[var]', 'float32', 2), 48: ('VARphB[var]', 'float32', 2), 50: ('VARphC[var]', 'float32', 2), 52: ('PF[PF]', 'float32', 2), 54: ('PFphA[PF]', 'float32', 2), 56: ('PFphB[PF]', 'float32', 2), 58: ('PFphC[PF]', 'float32', 2), 60: ('TotWhExp[Wh]', 'float32', 2), 62: ('TotWhExpPhA[Wh]', 'float32', 2), 64: ('TotWhExpPhB[Wh]', 'float32', 2), 66: ('TotWhExpPhC[Wh]', 'float32', 2), 68: ('TotWhImp[Wh]', 'float32', 2), 70: ('TotWhImpPhA[Wh]', 'float32', 2), 72: ('TotWhImpPhB[Wh]', 'float32', 2), 74: ('TotWhImpPhC[Wh]', 'float32', 2), 76: ('TotVAhExp[VAh]', 'float32', 2), 78: ('TotVAhExpPhA[VAh]', 'float32', 2), 80: ('TotVAhExpPhB[VAh]', 'float32', 2), 82: ('TotVAhExpPhC[VAh]', 'float32', 2), 84: ('TotVAhImp[VAh]', 'float32', 2), 86: ('TotVAhImpPhA[VAh]', 'float32', 2), 88: ('TotVAhImpPhB[VAh]', 'float32', 2), 90: ('TotVAhImpPhC[VAh]', 'float32', 2), 92: ('TotVArhImpQ1[varh]', 'float32', 2), 94: ('TotVArhImpQ1phA[varh]', 'float32', 2), 96: ('TotVArhImpQ1phB[varh]', 'float32', 2), 98: ('TotVArhImpQ1phC[varh]', 'float32', 2), 100: ('TotVArhImpQ2[varh]', 'float32', 2), 102: ('TotVArhImpQ2phA[varh]', 'float32', 2), 104: ('TotVArhImpQ2phB[varh]', 'float32', 2), 106: ('TotVArhImpQ2phC[varh]', 'float32', 2), 108: ('TotVArhExpQ3[varh]', 'float32', 2), 110: ('TotVArhExpQ3phA[varh]', 'float32', 2), 112: ('TotVArhExpQ3phB[varh]', 'float32', 2), 114: ('TotVArhExpQ3phC[varh]', 'float32', 2), 116: ('TotVArhExpQ4[varh]', 'float32', 2), 118: ('TotVArhExpQ4phA[varh]', 'float32', 2), 120: ('TotVArhExpQ4phB[varh]', 'float32', 2), 122: ('TotVArhExpQ4phC[varh]', 'float32', 2), 124: ('Evt', 'bitfield32', 2)}),
	(213, 0): ("ac_meter_abcn_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'float32', 2), 4: ('AphA[A]', 'float32', 2), 6: ('AphB[A]', 'float32', 2), 8: ('AphC[A]', 'float32', 2), 10: ('PhV[V]', 'float32', 2), 12: ('PhVphA[V]', 'float32', 2), 14: ('PhVphB[V]', 'float32', 2), 16: ('PhVphC[V]', 'float32', 2), 18: ('PPV[V]', 'float32', 2), 20: ('PPVphAB[V]', 'float32', 2), 22: ('PPVphBC[V]', 'float32', 2), 24: ('PPVphCA[V]', 'float32', 2), 26: ('Hz[Hz]', 'float32', 2), 28: ('W[W]', 'float32', 2), 30: ('WphA[W]', 'float32', 2), 32: ('WphB[W]', 'float32', 2), 34: ('WphC[W]', 'float32', 2), 36: ('VA[VA]', 'float32', 2), 38: ('VAphA[VA]', 'float32', 2), 40: ('VAphB[VA]', 'float32', 2), 42: ('VAphC[VA]', 'float32', 2), 44: ('VAR[var]', 'float32', 2), 46: ('VARphA[var]', 'float32', 2), 48: ('VARphB[var]', 'float32', 2), 50: ('VARphC[var]', 'float32', 2), 52: ('PF[PF]', 'float32', 2), 54: ('PFphA[PF]', 'float32', 2), 56: ('PFphB[PF]', 'float32', 2), 58: ('PFphC[PF]', 'float32', 2), 60: ('TotWhExp[Wh]', 'float32', 2), 62: ('TotWhExpPhA[Wh]', 'float32', 2), 64: ('TotWhExpPhB[Wh]', 'float32', 2), 66: ('TotWhExpPhC[Wh]', 'float32', 2), 68: ('TotWhImp[Wh]', 'float32', 2), 70: ('TotWhImpPhA[Wh]', 'float32', 2), 72: ('TotWhImpPhB[Wh]', 'float32', 2), 74: ('TotWhImpPhC[Wh]', 'float32', 2), 76: ('TotVAhExp[VAh]', 'float32', 2), 78: ('TotVAhExpPhA[VAh]', 'float32', 2), 80: ('TotVAhExpPhB[VAh]', 'float32', 2), 82: ('TotVAhExpPhC[VAh]', 'float32', 2), 84: ('TotVAhImp[VAh]', 'float32', 2), 86: ('TotVAhImpPhA[VAh]', 'float32', 2), 88: ('TotVAhImpPhB[VAh]', 'float32', 2), 90: ('TotVAhImpPhC[VAh]', 'float32', 2), 92: ('TotVArhImpQ1[varh]', 'float32', 2), 94: ('TotVArhImpQ1phA[varh]', 'float32', 2), 96: ('TotVArhImpQ1phB[varh]', 'float32', 2), 98: ('TotVArhImpQ1phC[varh]', 'float32', 2), 100: ('TotVArhImpQ2[varh]', 'float32', 2), 102: ('TotVArhImpQ2phA[varh]', 'float32', 2), 104: ('TotVArhImpQ2phB[varh]', 'float32', 2), 106: ('TotVArhImpQ2phC[varh]', 'float32', 2), 108: ('TotVArhExpQ3[varh]', 'float32', 2), 110: ('TotVArhExpQ3phA[varh]', 'float32', 2), 112: ('TotVArhExpQ3phB[varh]', 'float32', 2), 114: ('TotVArhExpQ3phC[varh]', 'float32', 2), 116: ('TotVArhExpQ4[varh]', 'float32', 2), 118: ('TotVArhExpQ4phA[varh]', 'float32', 2), 120: ('TotVArhExpQ4phB[varh]', 'float32', 2), 122: ('TotVArhExpQ4phC[varh]', 'float32', 2), 124: ('Evt', 'bitfield32', 2)}),
	(214, 0): ("ac_meter_abc_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'float32', 2), 4: ('AphA[A]', 'float32', 2), 6: ('AphB[A]', 'float32', 2), 8: ('AphC[A]', 'float32', 2), 10: ('PhV[V]', 'float32', 2), 12: ('PhVphA[V]', 'float32', 2), 14: ('PhVphB[V]', 'float32', 2), 16: ('PhVphC[V]', 'float32', 2), 18: ('PPV[V]', 'float32', 2), 20: ('PPVphAB[V]', 'float32', 2), 22: ('PPVphBC[V]', 'float32', 2), 24: ('PPVphCA[V]', 'float32', 2), 26: ('Hz[Hz]', 'float32', 2), 28: ('W[W]', 'float32', 2), 30: ('WphA[W]', 'float32', 2), 32: ('WphB[W]', 'float32', 2), 34: ('WphC[W]', 'float32', 2), 36: ('VA[VA]', 'float32', 2), 38: ('VAphA[VA]', 'float32', 2), 40: ('VAphB[VA]', 'float32', 2), 42: ('VAphC[VA]', 'float32', 2), 44: ('VAR[var]', 'float32', 2), 46: ('VARphA[var]', 'float32', 2), 48: ('VARphB[var]', 'float32', 2), 50: ('VARphC[var]', 'float32', 2), 52: ('PF[PF]', 'float32', 2), 54: ('PFphA[PF]', 'float32', 2), 56: ('PFphB[PF]', 'float32', 2), 58: ('PFphC[PF]', 'float32', 2), 60: ('TotWhExp[Wh]', 'float32', 2), 62: ('TotWhExpPhA[Wh]', 'float32', 2), 64: ('TotWhExpPhB[Wh]', 'float32', 2), 66: ('TotWhExpPhC[Wh]', 'float32', 2), 68: ('TotWhImp[Wh]', 'float32', 2), 70: ('TotWhImpPhA[Wh]', 'float32', 2), 72: ('TotWhImpPhB[Wh]', 'float32', 2), 74: ('TotWhImpPhC[Wh]', 'float32', 2), 76: ('TotVAhExp[VAh]', 'float32', 2), 78: ('TotVAhExpPhA[VAh]', 'float32', 2), 80: ('TotVAhExpPhB[VAh]', 'float32', 2), 82: ('TotVAhExpPhC[VAh]', 'float32', 2), 84: ('TotVAhImp[VAh]', 'float32', 2), 86: ('TotVAhImpPhA[VAh]', 'float32', 2), 88: ('TotVAhImpPhB[VAh]', 'float32', 2), 90: ('TotVAhImpPhC[VAh]', 'float32', 2), 92: ('TotVArhImpQ1[varh]', 'float32', 2), 94: ('TotVArhImpQ1phA[varh]', 'float32', 2), 96: ('TotVArhImpQ1phB[varh]', 'float32', 2), 98: ('TotVArhImpQ1phC[varh]', 'float32', 2), 100: ('TotVArhImpQ2[varh]', 'float32', 2), 102: ('TotVArhImpQ2phA[varh]', 'float32', 2), 104: ('TotVArhImpQ2phB[varh]', 'float32', 2), 106: ('TotVArhImpQ2phC[varh]', 'float32', 2), 108: ('TotVArhExpQ3[varh]', 'float32', 2), 110: ('TotVArhExpQ3phA[varh]', 'float32', 2), 112: ('TotVArhExpQ3phB[varh]', 'float32', 2), 114: ('TotVArhExpQ3phC[varh]', 'float32', 2), 116: ('TotVArhExpQ4[varh]', 'float32', 2), 118: ('TotVArhExpQ4phA[varh]', 'float32', 2), 120: ('TotVArhExpQ4phB[varh]', 'float32', 2), 122: ('TotVArhExpQ4phC[varh]', 'float32', 2), 124: ('Evt', 'bitfield32', 2)}),
	(220, 0): ("ac_meter_secure", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A[A]', 'int16', 1), 3: ('A_SF', 'sunssf', 1), 4: ('PhV[V]', 'int16', 1), 5: ('V_SF', 'sunssf', 1), 6: ('Hz[Hz]', 'int16', 1), 7: ('Hz_SF', 'sunssf', 1), 8: ('W[W]', 'int16', 1), 9: ('W_SF', 'sunssf', 1), 10: ('VA[VA]', 'int16', 1), 11: ('VA_SF', 'sunssf', 1), 12: ('VAR[var]', 'int16', 1), 13: ('VAR_SF', 'sunssf', 1), 14: ('PF[Pct]', 'int16', 1), 15: ('PF_SF', 'sunssf', 1), 16: ('TotWhExp[Wh]', 'acc32', 2), 18: ('TotWhImp[Wh]', 'acc32', 2), 20: ('TotWh_SF', 'sunssf', 1), 21: ('TotVAhExp[VAh]', 'acc32', 2), 23: ('TotVAhImp[VAh]', 'acc32', 2), 25: ('TotVAh_SF', 'sunssf', 1), 26: ('TotVArhImpQ1[varh]', 'acc32', 2), 28: ('TotVArhImpQ2[varh]', 'acc32', 2), 30: ('TotVArhExpQ3[varh]', 'acc32', 2), 32: ('TotVArhExpQ4[varh]', 'acc32', 2), 34: ('TotVArh_SF', 'sunssf', 1), 35: ('Evt', 'bitfield32', 2), 37: ('Rsrvd', 'pad', 1), 38: ('Ts', 'uint32', 2), 40: ('Ms', 'uint16', 1), 41: ('Seq', 'uint16', 1), 42: ('Alg', 'enum16', 1), 43: ('N', 'uint16', 1)}),
	(3, 0): ("model_3", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('X', 'uint16', 1), 3: ('Off1', 'uint16', 1), 4: ('Off2', 'uint16', 1), 5: ('Off3', 'uint16', 1), 6: ('Off4', 'uint16', 1), 7: ('Off5', 'uint16', 1), 8: ('Off6', 'uint16', 1), 9: ('Off7', 'uint16', 1), 10: ('Off8', 'uint16', 1), 11: ('Off9', 'uint16', 1), 12: ('Off10', 'uint16', 1), 13: ('Off11', 'uint16', 1), 14: ('Off12', 'uint16', 1), 15: ('Off13', 'uint16', 1), 16: ('Off14', 'uint16', 1), 17: ('Off15', 'uint16', 1), 18: ('Off16', 'uint16', 1), 19: ('Off17', 'uint16', 1), 20: ('Off18', 'uint16', 1), 21: ('Off19', 'uint16', 1), 22: ('Off20', 'uint16', 1), 23: ('Off21', 'uint16', 1), 24: ('Off22', 'uint16', 1), 25: ('Off23', 'uint16', 1), 26: ('Off24', 'uint16', 1), 27: ('Off25', 'uint16', 1), 28: ('Off26', 'uint16', 1), 29: ('Off27', 'uint16', 1), 30: ('Off28', 'uint16', 1), 31: ('Off29', 'uint16', 1), 32: ('Off30', 'uint16', 1), 33: ('Off31', 'uint16', 1), 34: ('Off32', 'uint16', 1), 35: ('Off33', 'uint16', 1), 36: ('Off34', 'uint16', 1), 37: ('Off35', 'uint16', 1), 38: ('Off36', 'uint16', 1), 39: ('Off37', 'uint16', 1), 40: ('Off38', 'uint16', 1), 41: ('Off39', 'uint16', 1), 42: ('Off40', 'uint16', 1), 43: ('Off41', 'uint16', 1), 44: ('Off42', 'uint16', 1), 45: ('Off43', 'uint16', 1), 46: ('Off44', 'uint16', 1), 47: ('Off45', 'uint16', 1), 48: ('Off46', 'uint16', 1), 49: ('Off47', 'uint16', 1), 50: ('Off48', 'uint16', 1), 51: ('Off49', 'uint16', 1), 52: ('Off50', 'uint16', 1), 53: ('Ts', 'uint32', 2), 55: ('Ms', 'uint16', 1), 56: ('Seq', 'uint16', 1), 57: ('Role', 'uint16', 1), 58: ('Alg', 'enum16', 1), 59: ('N', 'uint16', 1)}),
	(302, 0): ("irradiance", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1)}),
	(303, 0): ("bom_temp", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1)}),
	(304, 0): ("inclinometer", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1)}),
	(305, 0): ("location", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Tm[hhmmss.sssZ]', 'string', 6), 8: ('Date[YYYYMMDD]', 'string', 4), 12: ('Loc[text]', 'string', 20), 32: ('Lat[Degrees]', 'int32', 2), 34: ('Long[Degrees]', 'int32', 2), 36: ('Alt[meters]', 'int32', 2)}),
	(306, 0): ("ref_point", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('GHI[W/m2]', 'uint16', 1), 3: ('A[W/m2]', 'uint16', 1), 4: ('V[W/m2]', 'uint16', 1), 5: ('Tmp[W/m2]', 'uint16', 1)}),
	(307, 0): ("base_met", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('TmpAmb[C]', 'int16', 1), 3: ('RH[Pct]', 'int16', 1), 4: ('Pres[HPa]', 'int16', 1), 5: ('WndSpd[mps]', 'int16', 1), 6: ('WndDir[deg]', 'int16', 1), 7: ('Rain[mm]', 'int16', 1), 8: ('Snw[mm]', 'int16', 1), 9: ('PPT', 'int16', 1), 10: ('ElecFld[Vm]', 'int16', 1), 11: ('SurWet[kO]', 'int16', 1), 12: ('SoilWet[Pct]', 'int16', 1)}),
	(308, 0): ("mini_met", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('GHI[W/m2]', 'uint16', 1), 3: ('TmpBOM[C]', 'int16', 1), 4: ('TmpAmb[C]', 'int16', 1), 5: ('WndSpd[m/s]', 'uint16', 1)}),
	(4, 0): ("model_4", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('RqSeq', 'uint16', 1), 3: ('Sts', 'enum16', 1), 4: ('X', 'uint16', 1), 5: ('Val1', 'uint16', 1), 6: ('Val2', 'uint16', 1), 7: ('Val3', 'uint16', 1), 8: ('Val4', 'uint16', 1), 9: ('Val5', 'uint16', 1), 10: ('Val6', 'uint16', 1), 11: ('Val7', 'uint16', 1), 12: ('Val8', 'uint16', 1), 13: ('Val9', 'uint16', 1), 14: ('Val10', 'uint16', 1), 15: ('Val11', 'uint16', 1), 16: ('Val12', 'uint16', 1), 17: ('Val13', 'uint16', 1), 18: ('Val14', 'uint16', 1), 19: ('Val15', 'uint16', 1), 20: ('Val16', 'uint16', 1), 21: ('Val17', 'uint16', 1), 22: ('Val18', 'uint16', 1), 23: ('Val19', 'uint16', 1), 24: ('Val20', 'uint16', 1), 25: ('Val21', 'uint16', 1), 26: ('Val22', 'uint16', 1), 27: ('Val23', 'uint16', 1), 28: ('Val24', 'uint16', 1), 29: ('Val25', 'uint16', 1), 30: ('Val26', 'uint16', 1), 31: ('Val27', 'uint16', 1), 32: ('Val28', 'uint16', 1), 33: ('Val29', 'uint16', 1), 34: ('Val30', 'uint16', 1), 35: ('Val31', 'uint16', 1), 36: ('Val32', 'uint16', 1), 37: ('Val33', 'uint16', 1), 38: ('Val34', 'uint16', 1), 39: ('Val35', 'uint16', 1), 40: ('Val36', 'uint16', 1), 41: ('Val37', 'uint16', 1), 42: ('Val38', 'uint16', 1), 43: ('Val39', 'uint16', 1), 44: ('Val40', 'uint16', 1), 45: ('Val41', 'uint16', 1), 46: ('Val42', 'uint16', 1), 47: ('Val43', 'uint16', 1), 48: ('Val44', 'uint16', 1), 49: ('Val45', 'uint16', 1), 50: ('Val46', 'uint16', 1), 51: ('Val47', 'uint16', 1), 52: ('Val48', 'uint16', 1), 53: ('Val49', 'uint16', 1), 54: ('Val50', 'uint16', 1), 55: ('Ts', 'uint32', 2), 57: ('Ms', 'uint16', 1), 58: ('Seq', 'uint16', 1), 59: ('Alm', 'enum16', 1), 60: ('Alg', 'enum16', 1), 61: ('N', 'uint16', 1)}),
	(401, 0): ("string_combiner_current", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCAMax[A]', 'uint16', 1), 6: ('N', 'count', 1), 7: ('Evt', 'bitfield32', 2), 9: ('EvtVnd', 'bitfield32', 2), 11: ('DCA[A]', 'int16', 1), 12: ('DCAhr[Ah]', 'uint32', 2), 14: ('DCV[V]', 'uint16', 1), 15: ('Tmp[C]', 'int16', 1)}),
	(401, 1): ("string_combiner_current", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCAMax[A]', 'uint16', 1), 6: ('N', 'count', 1), 7: ('Evt', 'bitfield32', 2), 9: ('EvtVnd', 'bitfield32', 2), 11: ('DCA[A]', 'int16', 1), 12: ('DCAhr[Ah]', 'uint32', 2), 14: ('DCV[V]', 'uint16', 1), 15: ('Tmp[C]', 'int16', 1), 16: ('InID', 'uint16', 1), 17: ('InEvt', 'bitfield32', 2), 19: ('InEvtVnd', 'bitfield32', 2), 21: ('InDCA[A]', 'int16', 1), 22: ('InDCAhr[Ah]', 'uint32', 2)}),
	(402, 0): ("string_combiner_advanced", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCW_SF', 'sunssf', 1), 6: ('DCWh_SF', 'sunssf', 1), 7: ('DCAMax[A]', 'uint16', 1), 8: ('N', 'count', 1), 9: ('Evt', 'bitfield32', 2), 11: ('EvtVnd', 'bitfield32', 2), 13: ('DCA[A]', 'int16', 1), 14: ('DCAhr[Ah]', 'uint32', 2), 16: ('DCV[V]', 'uint16', 1), 17: ('Tmp[C]', 'int16', 1), 18: ('DCW[W]', 'int16', 1), 19: ('DCPR[Pct]', 'uint16', 1), 20: ('DCWh[Wh]', 'uint32', 2)}),
	(402, 1): ("string_combiner_advanced", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCW_SF', 'sunssf', 1), 6: ('DCWh_SF', 'sunssf', 1), 7: ('DCAMax[A]', 'uint16', 1), 8: ('N', 'count', 1), 9: ('Evt', 'bitfield32', 2), 11: ('EvtVnd', 'bitfield32', 2), 13: ('DCA[A]', 'int16', 1), 14: ('DCAhr[Ah]', 'uint32', 2), 16: ('DCV[V]', 'uint16', 1), 17: ('Tmp[C]', 'int16', 1), 18: ('DCW[W]', 'int16', 1), 19: ('DCPR[Pct]', 'uint16', 1), 20: ('DCWh[Wh]', 'uint32', 2), 22: ('InID', 'uint16', 1), 23: ('InEvt', 'bitfield32', 2), 25: ('EvtVnd', 'bitfield32', 2), 27: ('InDCA[A]', 'int16', 1), 28: ('InDCAhr[Ah]', 'uint32', 2), 30: ('InDCV[V]', 'uint16', 1), 31: ('InDCW[W]', 'int16', 1), 32: ('InDCWh[Wh]', 'uint32', 2), 34: ('InDCPR[Pct]', 'uint16', 1), 35: ('InN', 'uint16', 1)}),
	(403, 0): ("string_combiner_current_input", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCAMax[A]', 'uint16', 1), 6: ('N', 'count', 1), 7: ('Evt', 'bitfield32', 2), 9: ('EvtVnd', 'bitfield32', 2), 11: ('DCA[A]', 'int16', 1), 12: ('DCAhr[Ah]', 'acc32', 2), 14: ('DCV[V]', 'int16', 1), 15: ('Tmp[C]', 'int16', 1), 16: ('InDCA_SF', 'sunssf', 1), 17: ('InDCAhr_SF', 'sunssf', 1)}),
	(403, 1): ("string_combiner_current_input", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCAMax[A]', 'uint16', 1), 6: ('N', 'count', 1), 7: ('Evt', 'bitfield32', 2), 9: ('EvtVnd', 'bitfield32', 2), 11: ('DCA[A]', 'int16', 1), 12: ('DCAhr[Ah]', 'acc32', 2), 14: ('DCV[V]', 'int16', 1), 15: ('Tmp[C]', 'int16', 1), 16: ('InDCA_SF', 'sunssf', 1), 17: ('InDCAhr_SF', 'sunssf', 1), 18: ('InID', 'uint16', 1), 19: ('InEvt', 'bitfield32', 2), 21: ('InEvtVnd', 'bitfield32', 2), 23: ('InDCA[A]', 'int16', 1), 24: ('InDCAhr[Ah]', 'acc32', 2)}),
	(404, 0): ("string_combiner_advanced_inputs", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCW_SF', 'sunssf', 1), 6: ('DCWh_SF', 'sunssf', 1), 7: ('DCAMax[A]', 'uint16', 1), 8: ('N', 'count', 1), 9: ('Evt', 'bitfield32', 2), 11: ('EvtVnd', 'bitfield32', 2), 13: ('DCA[A]', 'int16', 1), 14: ('DCAhr[Ah]', 'acc32', 2), 16: ('DCV[V]', 'int16', 1), 17: ('Tmp[C]', 'int16', 1), 18: ('DCW[W]', 'int16', 1), 19: ('DCPR[Pct]', 'int16', 1), 20: ('DCWh[Wh]', 'acc32', 2), 22: ('InDCA_SF', 'sunssf', 1), 23: ('InDCAhr_SF', 'sunssf', 1), 24: ('InDCV_SF', 'sunssf', 1), 25: ('InDCW_SF', 'sunssf', 1), 26: ('InDCWh_SF', 'sunssf', 1)}),
	(404, 1): ("string_combiner_advanced_inputs", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DCA_SF', 'sunssf', 1), 3: ('DCAhr_SF', 'sunssf', 1), 4: ('DCV_SF', 'sunssf', 1), 5: ('DCW_SF', 'sunssf', 1), 6: ('DCWh_SF', 'sunssf', 1), 7: ('DCAMax[A]', 'uint16', 1), 8: ('N', 'count', 1), 9: ('Evt', 'bitfield32', 2), 11: ('EvtVnd', 'bitfield32', 2), 13: ('DCA[A]', 'int16', 1), 14: ('DCAhr[Ah]', 'acc32', 2), 16: ('DCV[V]', 'int16', 1), 17: ('Tmp[C]', 'int16', 1), 18: ('DCW[W]', 'int16', 1), 19: ('DCPR[Pct]', 'int16', 1), 20: ('DCWh[Wh]', 'acc32', 2), 22: ('InDCA_SF', 'sunssf', 1), 23: ('InDCAhr_SF', 'sunssf', 1), 24: ('InDCV_SF', 'sunssf', 1), 25: ('InDCW_SF', 'sunssf', 1), 26: ('InDCWh_SF', 'sunssf', 1), 27: ('InID', 'uint16', 1), 28: ('InEvt', 'bitfield32', 2), 30: ('InEvtVnd', 'bitfield32', 2), 32: ('InDCA[A]', 'int16', 1), 33: ('InDCAhr[Ah]', 'acc32', 2), 35: ('InDCV[V]', 'int16', 1), 36: ('InDCW[W]', 'int16', 1), 37: ('InDCWh[Wh]', 'acc32', 2), 39: ('InDCPR[Pct]', 'uint16', 1), 40: ('InN', 'uint16', 1)}),
	(5, 0): ("model_5", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('X', 'uint16', 1), 3: ('Off1', 'uint16', 1), 4: ('Val1', 'uint16', 1), 5: ('Off2', 'uint16', 1), 6: ('Val2', 'uint16', 1), 7: ('Off3', 'uint16', 1), 8: ('Val3', 'uint16', 1), 9: ('Off4', 'uint16', 1), 10: ('Val4', 'uint16', 1), 11: ('Off5', 'uint16', 1), 12: ('Val5', 'uint16', 1), 13: ('Off6', 'uint16', 1), 14: ('Val6', 'uint16', 1), 15: ('Off7', 'uint16', 1), 16: ('Val7', 'uint16', 1), 17: ('Off8', 'uint16', 1), 18: ('Val8', 'uint16', 1), 19: ('Off9', 'uint16', 1), 20: ('Val9', 'uint16', 1), 21: ('Off10', 'uint16', 1), 22: ('Val10', 'uint16', 1), 23: ('Off11', 'uint16', 1), 24: ('Val11', 'uint16', 1), 25: ('Off12', 'uint16', 1), 26: ('Val12', 'uint16', 1), 27: ('Off13', 'uint16', 1), 28: ('Val13', 'uint16', 1), 29: ('Off14', 'uint16', 1), 30: ('Val14', 'uint16', 1), 31: ('Off15', 'uint16', 1), 32: ('Val15', 'uint16', 1), 33: ('Off16', 'uint16', 1), 34: ('Val16', 'uint16', 1), 35: ('Off17', 'uint16', 1), 36: ('Val17', 'uint16', 1), 37: ('Off18', 'uint16', 1), 38: ('Val18', 'uint16', 1), 39: ('Off19', 'uint16', 1), 40: ('Val19', 'uint16', 1), 41: ('Off20', 'uint16', 1), 42: ('Val20', 'uint16', 1), 43: ('Off21', 'uint16', 1), 44: ('Val21', 'uint16', 1), 45: ('Off22', 'uint16', 1), 46: ('Val22', 'uint16', 1), 47: ('Off23', 'uint16', 1), 48: ('Val23', 'uint16', 1), 49: ('Off24', 'uint16', 1), 50: ('Val24', 'uint16', 1), 51: ('Off25', 'uint16', 1), 52: ('Val25', 'uint16', 1), 53: ('Off26', 'uint16', 1), 54: ('Val26', 'uint16', 1), 55: ('Off27', 'uint16', 1), 56: ('Val27', 'uint16', 1), 57: ('Off28', 'uint16', 1), 58: ('Val28', 'uint16', 1), 59: ('Off29', 'uint16', 1), 60: ('Val29', 'uint16', 1), 61: ('Off30', 'uint16', 1), 62: ('Val30', 'uint16', 1), 63: ('Off31', 'uint16', 1), 64: ('Val31', 'uint16', 1), 65: ('Off32', 'uint16', 1), 66: ('Val32', 'uint16', 1), 67: ('Off33', 'uint16', 1), 68: ('Val33', 'uint16', 1), 69: ('Off34', 'uint16', 1), 70: ('Val34', 'uint16', 1), 71: ('Off35', 'uint16', 1), 72: ('Val35', 'uint16', 1), 73: ('Off36', 'uint16', 1), 74: ('Val36', 'uint16', 1), 75: ('Off37', 'uint16', 1), 76: ('Val37', 'uint16', 1), 77: ('Off38', 'uint16', 1), 78: ('Val38', 'uint16', 1), 79: ('Off39', 'uint16', 1), 80: ('Val39', 'uint16', 1), 81: ('Off40', 'uint16', 1), 82: ('Val40', 'uint16', 1), 83: ('Ts', 'uint32', 2), 85: ('Ms', 'uint16', 1), 86: ('Seq', 'uint16', 1), 87: ('Role', 'uint16', 1), 88: ('Alg', 'enum16', 1), 89: ('N', 'uint16', 1)}),
	(501, 0): ("solar_module_float", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Stat', 'enum16', 1), 3: ('StatVend', 'enum16', 1), 4: ('Evt', 'bitfield32', 2), 6: ('EvtVend', 'bitfield32', 2), 8: ('Ctl', 'enum16', 1), 9: ('CtlVend', 'enum32', 2), 11: ('CtlVal', 'int32', 2), 13: ('Tms[Secs]', 'uint32', 2), 15: ('OutA[A]', 'float32', 2), 17: ('OutV[V]', 'float32', 2), 19: ('OutWh[Wh]', 'float32', 2), 21: ('OutW[W]', 'float32', 2), 23: ('Tmp[C]', 'float32', 2), 25: ('InA[A]', 'float32', 2), 27: ('InV[V]', 'float32', 2), 29: ('InWh[Wh]', 'float32', 2), 31: ('InW[W]', 'float32', 2)}),
	(502, 0): ("solar_module", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('A_SF', 'sunssf', 1), 3: ('V_SF', 'sunssf', 1), 4: ('W_SF', 'sunssf', 1), 5: ('Wh_SF', 'sunssf', 1), 6: ('Stat', 'enum16', 1), 7: ('StatVend', 'enum16', 1), 8: ('Evt', 'bitfield32', 2), 10: ('EvtVend', 'bitfield32', 2), 12: ('Ctl', 'enum16', 1), 13: ('CtlVend', 'enum32', 2), 15: ('CtlVal', 'int32', 2), 17: ('Tms[Secs]', 'uint32', 2), 19: ('OutA[A]', 'int16', 1), 20: ('OutV[V]', 'int16', 1), 21: ('OutWh[Wh]', 'acc32', 2), 23: ('OutPw[W]', 'int16', 1), 24: ('Tmp[C]', 'int16', 1), 25: ('InA[A]', 'int16', 1), 26: ('InV[V]', 'int16', 1), 27: ('InWh[Wh]', 'acc32', 2), 29: ('InW[W]', 'int16', 1)}),
	(6, 0): ("model_6", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('X', 'uint16', 1), 3: ('Off', 'uint16', 1), 4: ('Val1', 'uint16', 1), 5: ('Val2', 'uint16', 1), 6: ('Val3', 'uint16', 1), 7: ('Val4', 'uint16', 1), 8: ('Val5', 'uint16', 1), 9: ('Val6', 'uint16', 1), 10: ('Val7', 'uint16', 1), 11: ('Val8', 'uint16', 1), 12: ('Val9', 'uint16', 1), 13: ('Val10', 'uint16', 1), 14: ('Val11', 'uint16', 1), 15: ('Val12', 'uint16', 1), 16: ('Val13', 'uint16', 1), 17: ('Val14', 'uint16', 1), 18: ('Val15', 'uint16', 1), 19: ('Val16', 'uint16', 1), 20: ('Val17', 'uint16', 1), 21: ('Val18', 'uint16', 1), 22: ('Val19', 'uint16', 1), 23: ('Val20', 'uint16', 1), 24: ('Val21', 'uint16', 1), 25: ('Val22', 'uint16', 1), 26: ('Val23', 'uint16', 1), 27: ('Val24', 'uint16', 1), 28: ('Val25', 'uint16', 1), 29: ('Val26', 'uint16', 1), 30: ('Val27', 'uint16', 1), 31: ('Val28', 'uint16', 1), 32: ('Val29', 'uint16', 1), 33: ('Val30', 'uint16', 1), 34: ('Val31', 'uint16', 1), 35: ('Val32', 'uint16', 1), 36: ('Val33', 'uint16', 1), 37: ('Val34', 'uint16', 1), 38: ('Val35', 'uint16', 1), 39: ('Val36', 'uint16', 1), 40: ('Val37', 'uint16', 1), 41: ('Val38', 'uint16', 1), 42: ('Val39', 'uint16', 1), 43: ('Val40', 'uint16', 1), 44: ('Val41', 'uint16', 1), 45: ('Val42', 'uint16', 1), 46: ('Val43', 'uint16', 1), 47: ('Val44', 'uint16', 1), 48: ('Val45', 'uint16', 1), 49: ('Val46', 'uint16', 1), 50: ('Val47', 'uint16', 1), 51: ('Val48', 'uint16', 1), 52: ('Val49', 'uint16', 1), 53: ('Val50', 'uint16', 1), 54: ('Val51', 'uint16', 1), 55: ('Val52', 'uint16', 1), 56: ('Val53', 'uint16', 1), 57: ('Val54', 'uint16', 1), 58: ('Val55', 'uint16', 1), 59: ('Val56', 'uint16', 1), 60: ('Val57', 'uint16', 1), 61: ('Val58', 'uint16', 1), 62: ('Val59', 'uint16', 1), 63: ('Val60', 'uint16', 1), 64: ('Val61', 'uint16', 1), 65: ('Val62', 'uint16', 1), 66: ('Val63', 'uint16', 1), 67: ('Val64', 'uint16', 1), 68: ('Val65', 'uint16', 1), 69: ('Val66', 'uint16', 1), 70: ('Val67', 'uint16', 1), 71: ('Val68', 'uint16', 1), 72: ('Val69', 'uint16', 1), 73: ('Val70', 'uint16', 1), 74: ('Val71', 'uint16', 1), 75: ('Val72', 'uint16', 1), 76: ('Val73', 'uint16', 1), 77: ('Val74', 'uint16', 1), 78: ('Val75', 'uint16', 1), 79: ('Val76', 'uint16', 1), 80: ('Val77', 'uint16', 1), 81: ('Val78', 'uint16', 1), 82: ('Val79', 'uint16', 1), 83: ('Val80', 'uint16', 1), 84: ('Ts', 'uint32', 2), 86: ('Ms', 'uint16', 1), 87: ('Seq', 'uint16', 1), 88: ('Role', 'uint16', 1), 89: ('Rsrvd', 'pad', 1), 90: ('Alg', 'enum16', 1), 91: ('N', 'uint16', 1)}),
	(601, 0): ("tracker_controller", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Nam', 'string', 8), 10: ('Typ', 'enum16', 1), 11: ('DtLoc[YYYYMMDD]', 'string', 5), 16: ('TmLoc[hhmmss]', 'string', 3), 19: ('Day', 'uint16', 1), 20: ('GlblElCtl[Degrees]', 'int32', 2), 22: ('GlblAzCtl[Degrees]', 'int32', 2), 24: ('GlblCtl', 'enum16', 1), 25: ('GlblAlm', 'bitfield16', 1), 26: ('Dgr_SF', 'sunssf', 1), 27: ('N', 'uint16', 1)}),
	(7, 0): ("model_7", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('RqSeq', 'uint16', 1), 3: ('Sts', 'enum16', 1), 4: ('Ts', 'uint32', 2), 6: ('Ms', 'uint16', 1), 7: ('Seq', 'uint16', 1), 8: ('Alm', 'enum16', 1), 9: ('Rsrvd', 'pad', 1), 10: ('Alg', 'enum16', 1), 11: ('N', 'uint16', 1)}),
	(701, 0): ("DERMeasureAC", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ACType', 'enum16', 1), 3: ('St', 'enum16', 1), 4: ('InvSt', 'enum16', 1), 5: ('ConnSt', 'enum16', 1), 6: ('Alrm', 'bitfield32', 2), 8: ('DERMode', 'bitfield32', 2), 10: ('W[W]', 'int16', 1), 11: ('VA[VA]', 'int16', 1), 12: ('Var[Var]', 'int16', 1), 13: ('PF', 'int16', 1), 14: ('A[A]', 'int16', 1), 15: ('LLV[V]', 'uint16', 1), 16: ('LNV[V]', 'uint16', 1), 17: ('Hz[Hz]', 'uint32', 2), 19: ('TotWhInj[Wh]', 'uint64', 4), 23: ('TotWhAbs[Wh]', 'uint64', 4), 27: ('TotVarhInj[Varh]', 'uint64', 4), 31: ('TotVarhAbs[Varh]', 'uint64', 4), 35: ('TmpAmb[C]', 'int16', 1), 36: ('TmpCab[C]', 'int16', 1), 37: ('TmpSnk[C]', 'int16', 1), 38: ('TmpTrns[C]', 'int16', 1), 39: ('TmpSw[C]', 'int16', 1), 40: ('TmpOt[C]', 'int16', 1), 41: ('WL1[W]', 'int16', 1), 42: ('VAL1[VA]', 'int16', 1), 43: ('VarL1[Var]', 'int16', 1), 44: ('PFL1', 'int16', 1), 45: ('AL1[A]', 'int16', 1), 46: ('VL1L2[V]', 'uint16', 1), 47: ('VL1[V]', 'uint16', 1), 48: ('TotWhInjL1[Wh]', 'uint64', 4), 52: ('TotWhAbsL1[Wh]', 'uint64', 4), 56: ('TotVarhInjL1[Varh]', 'uint64', 4), 60: ('TotVarhAbsL1[Varh]', 'uint64', 4), 64: ('WL2[W]', 'int16', 1), 65: ('VAL2[VA]', 'int16', 1), 66: ('VarL2[Var]', 'int16', 1), 67: ('PFL2', 'int16', 1), 68: ('AL2[A]', 'int16', 1), 69: ('VL2L3[V]', 'uint16', 1), 70: ('VL2[V]', 'uint16', 1), 71: ('TotWhInjL2[Wh]', 'uint64', 4), 75: ('TotWhAbsL2[Wh]', 'uint64', 4), 79: ('TotVarhInjL2[Varh]', 'uint64', 4), 83: ('TotVarhAbsL2[Varh]', 'uint64', 4), 87: ('WL3[W]', 'int16', 1), 88: ('VAL3[VA]', 'int16', 1), 89: ('VarL3[Var]', 'int16', 1), 90: ('PFL3', 'int16', 1), 91: ('AL3[A]', 'int16', 1), 92: ('VL3L1[V]', 'uint16', 1), 93: ('VL3[V]', 'uint16', 1), 94: ('TotWhInjL3[Wh]', 'uint64', 4), 98: ('TotWhAbsL3[Wh]', 'uint64', 4), 102: ('TotVarhInjL3[Varh]', 'uint64', 4), 106: ('TotVarhAbsL3[Varh]', 'uint64', 4), 110: ('ThrotPct[Pct]', 'uint16', 1), 111: ('ThrotSrc', 'bitfield32', 2), 113: ('A_SF', 'sunssf', 1), 114: ('V_SF', 'sunssf', 1), 115: ('Hz_SF', 'sunssf', 1), 116: ('W_SF', 'sunssf', 1), 117: ('PF_SF', 'sunssf', 1), 118: ('VA_SF', 'sunssf', 1), 119: ('Var_SF', 'sunssf', 1), 120: ('TotWh_SF', 'sunssf', 1), 121: ('TotVarh_SF', 'sunssf', 1), 122: ('Tmp_SF', 'sunssf', 1), 123: ('MnAlrmInfo', 'string', 32)}),
	(702, 0): ("DERCapacity", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('WMaxRtg[W]', 'uint16', 1), 3: ('WOvrExtRtg[W]', 'uint16', 1), 4: ('WOvrExtRtgPF', 'uint16', 1), 5: ('WUndExtRtg[W]', 'uint16', 1), 6: ('WUndExtRtgPF', 'uint16', 1), 7: ('VAMaxRtg[VA]', 'uint16', 1), 8: ('VarMaxInjRtg[Var]', 'uint16', 1), 9: ('VarMaxAbsRtg[Var]', 'uint16', 1), 10: ('WChaRteMaxRtg[W]', 'uint16', 1), 11: ('WDisChaRteMaxRtg[W]', 'uint16', 1), 12: ('VAChaRteMaxRtg[VA]', 'uint16', 1), 13: ('VADisChaRteMaxRtg[VA]', 'uint16', 1), 14: ('VNomRtg[V]', 'uint16', 1), 15: ('VMaxRtg[V]', 'uint16', 1), 16: ('VMinRtg[V]', 'uint16', 1), 17: ('AMaxRtg[A]', 'uint16', 1), 18: ('PFOvrExtRtg', 'uint16', 1), 19: ('PFUndExtRtg', 'uint16', 1), 20: ('ReactSusceptRtg[S]', 'uint16', 1), 21: ('NorOpCatRtg', 'enum16', 1), 22: ('AbnOpCatRtg', 'enum16', 1), 23: ('CtrlModes', 'bitfield32', 2), 25: ('IntIslandCatRtg', 'bitfield16', 1), 26: ('WMax[W]', 'uint16', 1), 27: ('WMaxOvrExt[W]', 'uint16', 1), 28: ('WOvrExtPF', 'uint16', 1), 29: ('WMaxUndExt[W]', 'uint16', 1), 30: ('WUndExtPF', 'uint16', 1), 31: ('VAMax[VA]', 'uint16', 1), 32: ('VarMaxInj[Var]', 'uint16', 1), 33: ('VarMaxAbs[Var]', 'uint16', 1), 34: ('WChaRteMax[W]', 'uint16', 1), 35: ('WDisChaRteMax[W]', 'uint16', 1), 36: ('VAChaRteMax[VA]', 'uint16', 1), 37: ('VADisChaRteMax[VA]', 'uint16', 1), 38: ('VNom[V]', 'uint16', 1), 39: ('VMax[V]', 'uint16', 1), 40: ('VMin[V]', 'uint16', 1), 41: ('AMax[A]', 'uint16', 1), 42: ('PFOvrExt', 'uint16', 1), 43: ('PFUndExt', 'uint16', 1), 44: ('IntIslandCat', 'bitfield16', 1), 45: ('W_SF', 'sunssf', 1), 46: ('PF_SF', 'sunssf', 1), 47: ('VA_SF', 'sunssf', 1), 48: ('Var_SF', 'sunssf', 1), 49: ('V_SF', 'sunssf', 1), 50: ('A_SF', 'sunssf', 1), 51: ('S_SF', 'sunssf', 1)}),
	(703, 0): ("DEREnterService", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ES', 'enum16', 1), 3: ('ESVHi[Pct]', 'uint16', 1), 4: ('ESVLo[Pct]', 'uint16', 1), 5: ('ESHzHi[Hz]', 'uint32', 2), 7: ('ESHzLo[Hz]', 'uint32', 2), 9: ('ESDlyTms[Secs]', 'uint32', 2), 11: ('ESRndTms[Secs]', 'uint32', 2), 13: ('ESRmpTms[Secs]', 'uint32', 2), 15: ('ESDlyRemTms[Secs]', 'uint32', 2), 17: ('V_SF', 'sunssf', 1), 18: ('Hz_SF', 'sunssf', 1)}),
	(704, 0): ("DERCtlAC", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('PFWInjEna', 'enum16', 1), 3: ('PFWInjEnaRvrt', 'enum16', 1), 4: ('PFWInjRvrtTms[Secs]', 'uint32', 2), 6: ('PFWInjRvrtRem[Secs]', 'uint32', 2), 8: ('PFWAbsEna', 'enum16', 1), 9: ('PFWAbsEnaRvrt', 'enum16', 1), 10: ('PFWAbsRvrtTms[Secs]', 'uint32', 2), 12: ('PFWAbsRvrtRem[Secs]', 'uint32', 2), 14: ('WMaxLimPctEna', 'enum16', 1), 15: ('WMaxLimPct[Pct]', 'uint16', 1), 16: ('WMaxLimPctRvrt[Pct]', 'uint16', 1), 17: ('WMaxLimPctEnaRvrt', 'enum16', 1), 18: ('WMaxLimPctRvrtTms[Secs]', 'uint32', 2), 20: ('WMaxLimPctRvrtRem[Secs]', 'uint32', 2), 22: ('WSetEna', 'enum16', 1), 23: ('WSetMod', 'enum16', 1), 24: ('WSet[W]', 'int32', 2), 26: ('WSetRvrt[W]', 'int32', 2), 28: ('WSetPct[Pct]', 'int16', 1), 29: ('WSetPctRvrt[Pct]', 'int16', 1), 30: ('WSetEnaRvrt', 'enum16', 1), 31: ('WSetRvrtTms[Secs]', 'uint32', 2), 33: ('WSetRvrtRem[Secs]', 'uint32', 2), 35: ('VarSetEna', 'enum16', 1), 36: ('VarSetMod', 'enum16', 1), 37: ('VarSetPri', 'enum16', 1), 38: ('VarSet[Var]', 'int32', 2), 40: ('VarSetRvrt[Var]', 'int32', 2), 42: ('VarSetPct[Pct]', 'int16', 1), 43: ('VarSetPctRvrt[Pct]', 'int16', 1), 44: ('VarSetEnaRvrt', 'enum16', 1), 45: ('VarSetRvrtTms[Secs]', 'uint32', 2), 47: ('VarSetRvrtRem[Secs]', 'uint32', 2), 49: ('WRmp[%Max/Sec]', 'uint16', 1), 50: ('WRmpRef', 'enum16', 1), 51: ('VarRmp[%Max/Sec]', 'uint16', 1), 52: ('AntiIslEna', 'enum16', 1), 53: ('PF_SF', 'sunssf', 1), 54: ('WMaxLimPct_SF', 'sunssf', 1), 55: ('WSet_SF', 'sunssf', 1), 56: ('WSetPct_SF', 'sunssf', 1), 57: ('VarSet_SF', 'sunssf', 1), 58: ('VarSetPct_SF', 'sunssf', 1)}),
	(705, 0): ("DERVoltVar", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCrvReq', 'uint16', 1), 4: ('AdptCrvRslt', 'enum16', 1), 5: ('NPt', 'uint16', 1), 6: ('NCrv', 'uint16', 1), 7: ('RvrtTms[Secs]', 'uint32', 2), 9: ('RvrtRem[Secs]', 'uint32', 2), 11: ('RvrtCrv', 'uint16', 1), 12: ('V_SF', 'sunssf', 1), 13: ('DeptRef_SF', 'sunssf', 1), 14: ('RspTms_SF', 'sunssf', 1)}),
	(706, 0): ("DERVoltWatt", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCrvReq', 'uint16', 1), 4: ('AdptCrvRslt', 'enum16', 1), 5: ('NPt', 'uint16', 1), 6: ('NCrv', 'uint16', 1), 7: ('RvrtTms[Secs]', 'uint32', 2), 9: ('RvrtRem[Secs]', 'uint32', 2), 11: ('RvrtCrv', 'uint16', 1), 12: ('V_SF', 'sunssf', 1), 13: ('DeptRef_SF', 'sunssf', 1), 14: ('RspTms_SF', 'sunssf', 1)}),
	(707, 0): ("DERTripLV", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCrvReq', 'uint16', 1), 4: ('AdptCrvRslt', 'enum16', 1), 5: ('NPt', 'uint16', 1), 6: ('NCrvSet', 'uint16', 1), 7: ('V_SF', 'sunssf', 1), 8: ('Tms_SF', 'sunssf', 1)}),
	(708, 0): ("DERTripHV", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCrvReq', 'uint16', 1), 4: ('AdptCrvRslt', 'enum16', 1), 5: ('NPt', 'uint16', 1), 6: ('NCrvSet', 'uint16', 1), 7: ('V_SF', 'sunssf', 1), 8: ('Tms_SF', 'sunssf', 1)}),
	(709, 0): ("DERTripLF", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCrvReq', 'uint16', 1), 4: ('AdptCrvRslt', 'enum16', 1), 5: ('NPt', 'uint16', 1), 6: ('NCrvSet', 'uint16', 1), 7: ('Hz_SF', 'sunssf', 1), 8: ('Tms_SF', 'sunssf', 1)}),
	(710, 0): ("DERTripHF", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCrvReq', 'uint16', 1), 4: ('AdptCrvRslt', 'enum16', 1), 5: ('NPt', 'uint16', 1), 6: ('NCrvSet', 'uint16', 1), 7: ('Hz_SF', 'sunssf', 1), 8: ('Tms_SF', 'sunssf', 1)}),
	(711, 0): ("DERFreqDroop", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCtlReq', 'uint16', 1), 4: ('AdptCtlRslt', 'enum16', 1), 5: ('NCtl', 'uint16', 1), 6: ('RvrtTms[Secs]', 'uint32', 2), 8: ('RvrtRem[Secs]', 'uint32', 2), 10: ('RvrtCtl', 'uint16', 1), 11: ('Db_SF', 'sunssf', 1), 12: ('K_SF', 'sunssf', 1), 13: ('RspTms_SF', 'sunssf', 1)}),
	(712, 0): ("DERWattVar", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Ena', 'enum16', 1), 3: ('AdptCrvReq', 'uint16', 1), 4: ('AdptCrvRslt', 'enum16', 1), 5: ('NPt', 'uint16', 1), 6: ('NCrv', 'uint16', 1), 7: ('RvrtTms[Secs]', 'uint32', 2), 9: ('RvrtRem[Secs]', 'uint32', 2), 11: ('RvrtCrv', 'uint16', 1), 12: ('W_SF', 'sunssf', 1), 13: ('DeptRef_SF', 'sunssf', 1)}),
	(713, 0): ("DERStorageCapacity", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('WHRtg[WH]', 'uint16', 1), 3: ('WHAvail[WH]', 'uint16', 1), 4: ('SoC[Pct]', 'uint16', 1), 5: ('SoH[Pct]', 'uint16', 1), 6: ('Sta', 'enum16', 1), 7: ('WH_SF', 'sunssf', 1), 8: ('Pct_SF', 'sunssf', 1)}),
	(714, 0): ("DERMeasureDC", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('PrtAlrms', 'bitfield32', 2), 4: ('NPrt', 'uint16', 1), 5: ('DCA[A]', 'int16', 1), 6: ('DCW[W]', 'int16', 1), 7: ('DCWhInj[Wh]', 'uint64', 4), 11: ('DCWhAbs[Wh]', 'uint64', 4), 15: ('DCA_SF', 'sunssf', 1), 16: ('DCV_SF', 'sunssf', 1), 17: ('DCW_SF', 'sunssf', 1), 18: ('DCWH_SF', 'sunssf', 1), 19: ('Tmp_SF', 'sunssf', 1)}),
	(715, 0): ("DERCtl", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('LocRemCtl', 'enum16', 1), 3: ('DERHb', 'uint32', 2), 5: ('ControllerHb', 'uint32', 2), 7: ('AlarmReset', 'uint16', 1), 8: ('OpCtl', 'enum16', 1)}),
	(8, 0): ("model_8", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Fmt', 'enum16', 1), 3: ('N', 'uint16', 1)}),
	(801, 0): ("storage", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('DEPRECATED', 'enum16', 1)}),
	(802, 0): ("battery", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('AHRtg[Ah]', 'uint16', 1), 3: ('WHRtg[Wh]', 'uint16', 1), 4: ('WChaRteMax[W]', 'uint16', 1), 5: ('WDisChaRteMax[W]', 'uint16', 1), 6: ('DisChaRte[%WHRtg]', 'uint16', 1), 7: ('SoCMax[%WHRtg]', 'uint16', 1), 8: ('SoCMin[%WHRtg]', 'uint16', 1), 9: ('SocRsvMax[%WHRtg]', 'uint16', 1), 10: ('SoCRsvMin[%WHRtg]', 'uint16', 1), 11: ('SoC[%WHRtg]', 'uint16', 1), 12: ('DoD[%]', 'uint16', 1), 13: ('SoH[%]', 'uint16', 1), 14: ('NCyc', 'uint32', 2), 16: ('ChaSt', 'enum16', 1), 17: ('LocRemCtl', 'enum16', 1), 18: ('Hb', 'uint16', 1), 19: ('CtrlHb', 'uint16', 1), 20: ('AlmRst', 'uint16', 1), 21: ('Typ', 'enum16', 1), 22: ('State', 'enum16', 1), 23: ('StateVnd', 'enum16', 1), 24: ('WarrDt', 'uint32', 2), 26: ('Evt1', 'bitfield32', 2), 28: ('Evt2', 'bitfield32', 2), 30: ('EvtVnd1', 'bitfield32', 2), 32: ('EvtVnd2', 'bitfield32', 2), 34: ('V[V]', 'uint16', 1), 35: ('VMax[V]', 'uint16', 1), 36: ('VMin[V]', 'uint16', 1), 37: ('CellVMax[V]', 'uint16', 1), 38: ('CellVMaxStr', 'uint16', 1), 39: ('CellVMaxMod', 'uint16', 1), 40: ('CellVMin[V]', 'uint16', 1), 41: ('CellVMinStr', 'uint16', 1), 42: ('CellVMinMod', 'uint16', 1), 43: ('CellVAvg[V]', 'uint16', 1), 44: ('A[A]', 'int16', 1), 45: ('AChaMax[A]', 'uint16', 1), 46: ('ADisChaMax[A]', 'uint16', 1), 47: ('W[W]', 'int16', 1), 48: ('ReqInvState', 'enum16', 1), 49: ('ReqW[W]', 'int16', 1), 50: ('SetOp', 'enum16', 1), 51: ('SetInvState', 'enum16', 1), 52: ('AHRtg_SF', 'sunssf', 1), 53: ('WHRtg_SF', 'sunssf', 1), 54: ('WChaDisChaMax_SF', 'sunssf', 1), 55: ('DisChaRte_SF', 'sunssf', 1), 56: ('SoC_SF', 'sunssf', 1), 57: ('DoD_SF', 'sunssf', 1), 58: ('SoH_SF', 'sunssf', 1), 59: ('V_SF', 'sunssf', 1), 60: ('CellV_SF', 'sunssf', 1), 61: ('A_SF', 'sunssf', 1), 62: ('AMax_SF', 'sunssf', 1), 63: ('W_SF', 'sunssf', 1)}),
	(803, 0): ("lithium_ion_bank", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('NStr', 'uint16', 1), 3: ('NStrCon', 'uint16', 1), 4: ('ModTmpMax[C]', 'int16', 1), 5: ('ModTmpMaxStr', 'uint16', 1), 6: ('ModTmpMaxMod', 'uint16', 1), 7: ('ModTmpMin[C]', 'int16', 1), 8: ('ModTmpMinStr', 'uint16', 1), 9: ('ModTmpMinMod', 'uint16', 1), 10: ('ModTmpAvg[C]', 'int16', 1), 11: ('StrVMax[V]', 'uint16', 1), 12: ('StrVMaxStr', 'uint16', 1), 13: ('StrVMin[V]', 'uint16', 1), 14: ('StrVMinStr', 'uint16', 1), 15: ('StrVAvg[V]', 'uint16', 1), 16: ('StrAMax[A]', 'int16', 1), 17: ('StrAMaxStr', 'uint16', 1), 18: ('StrAMin[A]', 'int16', 1), 19: ('StrAMinStr', 'uint16', 1), 20: ('StrAAvg[A]', 'int16', 1), 21: ('NCellBal', 'uint16', 1), 22: ('CellV_SF', 'sunssf', 1), 23: ('ModTmp_SF', 'sunssf', 1), 24: ('A_SF', 'sunssf', 1), 25: ('SoH_SF', 'sunssf', 1), 26: ('SoC_SF', 'sunssf', 1), 27: ('V_SF', 'sunssf', 1)}),
	(804, 0): ("lithium_ion_string", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Idx', 'uint16', 1), 3: ('NMod', 'uint16', 1), 4: ('St', 'bitfield32', 2), 6: ('ConFail', 'enum16', 1), 7: ('NCellBal', 'uint16', 1), 8: ('SoC[%]', 'uint16', 1), 9: ('DoD[%]', 'uint16', 1), 10: ('NCyc', 'uint32', 2), 12: ('SoH[%]', 'uint16', 1), 13: ('A[A]', 'int16', 1), 14: ('V[V]', 'uint16', 1), 15: ('CellVMax[V]', 'uint16', 1), 16: ('CellVMaxMod', 'uint16', 1), 17: ('CellVMin[V]', 'uint16', 1), 18: ('CellVMinMod', 'uint16', 1), 19: ('CellVAvg[V]', 'uint16', 1), 20: ('ModTmpMax[C]', 'int16', 1), 21: ('ModTmpMaxMod', 'uint16', 1), 22: ('ModTmpMin[C]', 'int16', 1), 23: ('ModTmpMinMod', 'uint16', 1), 24: ('ModTmpAvg[C]', 'int16', 1), 25: ('Pad1', 'pad', 1), 26: ('ConSt', 'bitfield32', 2), 28: ('Evt1', 'bitfield32', 2), 30: ('Evt2', 'bitfield32', 2), 32: ('EvtVnd1', 'bitfield32', 2), 34: ('EvtVnd2', 'bitfield32', 2), 36: ('SetEna', 'enum16', 1), 37: ('SetCon', 'enum16', 1), 38: ('SoC_SF', 'sunssf', 1), 39: ('SoH_SF', 'sunssf', 1), 40: ('DoD_SF', 'sunssf', 1), 41: ('A_SF', 'sunssf', 1), 42: ('V_SF', 'sunssf', 1), 43: ('CellV_SF', 'sunssf', 1), 44: ('ModTmp_SF', 'sunssf', 1), 45: ('Pad2', 'pad', 1), 46: ('Pad3', 'pad', 1), 47: ('Pad4', 'pad', 1)}),
	(805, 0): ("lithium-ion-module", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('StrIdx', 'uint16', 1), 3: ('ModIdx', 'uint16', 1), 4: ('NCell', 'uint16', 1), 5: ('SoC[%]', 'uint16', 1), 6: ('DoD[%]', 'uint16', 1), 7: ('SoH[%]', 'uint16', 1), 8: ('NCyc', 'uint32', 2), 10: ('V[V]', 'uint16', 1), 11: ('CellVMax[V]', 'uint16', 1), 12: ('CellVMaxCell', 'uint16', 1), 13: ('CellVMin[V]', 'uint16', 1), 14: ('CellVMinCell', 'uint16', 1), 15: ('CellVAvg[V]', 'uint16', 1), 16: ('CellTmpMax[C]', 'int16', 1), 17: ('CellTmpMaxCell', 'uint16', 1), 18: ('CellTmpMin[C]', 'int16', 1), 19: ('CellTmpMinCell', 'uint16', 1), 20: ('CellTmpAvg[C]', 'int16', 1), 21: ('NCellBal', 'uint16', 1), 22: ('SN', 'string', 16), 38: ('SoC_SF', 'sunssf', 1), 39: ('SoH_SF', 'sunssf', 1), 40: ('DoD_SF', 'sunssf', 1), 41: ('V_SF', 'sunssf', 1), 42: ('CellV_SF', 'sunssf', 1), 43: ('Tmp_SF', 'sunssf', 1)}),
	(806, 0): ("flow_battery", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('BatTBD', 'uint16', 1)}),
	(807, 0): ("flow_battery_string", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('Idx', 'uint16', 1), 3: ('NMod', 'uint16', 1), 4: ('NModCon', 'uint16', 1), 5: ('ModVMax[V]', 'uint16', 1), 6: ('ModVMaxMod', 'uint16', 1), 7: ('ModVMin[V]', 'uint16', 1), 8: ('ModVMinMod', 'uint16', 1), 9: ('ModVAvg[V]', 'uint16', 1), 10: ('CellVMax[V]', 'uint16', 1), 11: ('CellVMaxMod', 'uint16', 1), 12: ('CellVMaxStk', 'uint16', 1), 13: ('CellVMin[V]', 'uint16', 1), 14: ('CellVMinMod', 'uint16', 1), 15: ('CellVMinStk', 'uint16', 1), 16: ('CellVAvg[V]', 'uint16', 1), 17: ('TmpMax[C]', 'int16', 1), 18: ('TmpMaxMod', 'uint16', 1), 19: ('TmpMin[C]', 'int16', 1), 20: ('TmpMinMod', 'uint16', 1), 21: ('TmpAvg[C]', 'int16', 1), 22: ('Evt1', 'bitfield32', 2), 24: ('Evt2', 'bitfield32', 2), 26: ('EvtVnd1', 'bitfield32', 2), 28: ('EvtVnd2', 'bitfield32', 2), 30: ('ModV_SF', 'sunssf', 1), 31: ('CellV_SF', 'sunssf', 1), 32: ('Tmp_SF', 'sunssf', 1), 33: ('SoC_SF', 'sunssf', 1), 34: ('OCV_SF', 'sunssf', 1), 35: ('Pad1', 'pad', 1)}),
	(808, 0): ("flow_battery_module", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('ModuleTBD', 'uint16', 1)}),
	(809, 0): ("flow_battery_stack", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('StackTBD', 'uint16', 1)}),
	(9, 0): ("model_9", {0: ('ID', 'uint16', 1), 1: ('L', 'uint16', 1), 2: ('CertUID', 'uint16', 1), 3: ('CertRole', 'uint16', 1), 4: ('Fmt', 'enum16', 1), 5: ('Typ', 'enum16', 1), 6: ('TotLn', 'uint16', 1), 7: ('FrgLn', 'uint16', 1), 8: ('Frg1', 'uint16', 1), 9: ('Frg2', 'uint16', 1), 10: ('Frg3', 'uint16', 1), 11: ('Frg4', 'uint16', 1), 12: ('Frg5', 'uint16', 1), 13: ('Frg6', 'uint16', 1), 14: ('Frg7', 'uint16', 1), 15: ('Frg8', 'uint16', 1), 16: ('Frg9', 'uint16', 1), 17: ('Frg10', 'uint16', 1), 18: ('Frg11', 'uint16', 1), 19: ('Frg12', 'uint16', 1), 20: ('Frg13', 'uint16', 1), 21: ('Frg14', 'uint16', 1), 22: ('Frg15', 'uint16', 1), 23: ('Frg16', 'uint16', 1), 24: ('Frg17', 'uint16', 1), 25: ('Frg18', 'uint16', 1), 26: ('Frg19', 'uint16', 1), 27: ('Frg20', 'uint16', 1), 28: ('Frg21', 'uint16', 1), 29: ('Frg22', 'uint16', 1), 30: ('Frg23', 'uint16', 1), 31: ('Frg24', 'uint16', 1), 32: ('Frg25', 'uint16', 1), 33: ('Frg26', 'uint16', 1), 34: ('Frg27', 'uint16', 1), 35: ('Frg28', 'uint16', 1), 36: ('Frg29', 'uint16', 1), 37: ('Frg30', 'uint16', 1), 38: ('Frg31', 'uint16', 1), 39: ('Frg32', 'uint16', 1), 40: ('Frg33', 'uint16', 1), 41: ('Frg34', 'uint16', 1), 42: ('Frg35', 'uint16', 1), 43: ('Frg36', 'uint16', 1), 44: ('Frg37', 'uint16', 1), 45: ('Frg38', 'uint16', 1), 46: ('Frg39', 'uint16', 1), 47: ('Frg40', 'uint16', 1), 48: ('Frg41', 'uint16', 1), 49: ('Frg42', 'uint16', 1), 50: ('Frg43', 'uint16', 1), 51: ('Frg44', 'uint16', 1), 52: ('Frg45', 'uint16', 1), 53: ('Frg46', 'uint16', 1), 54: ('Frg47', 'uint16', 1), 55: ('Frg48', 'uint16', 1), 56: ('Frg49', 'uint16', 1), 57: ('Frg50', 'uint16', 1), 58: ('Frg51', 'uint16', 1), 59: ('Frg52', 'uint16', 1), 60: ('Frg53', 'uint16', 1), 61: ('Frg54', 'uint16', 1), 62: ('Frg55', 'uint16', 1), 63: ('Frg56', 'uint16', 1), 64: ('Frg57', 'uint16', 1), 65: ('Frg58', 'uint16', 1), 66: ('Frg59', 'uint16', 1), 67: ('Frg60', 'uint16', 1), 68: ('Frg61', 'uint16', 1), 69: ('Frg62', 'uint16', 1), 70: ('Frg63', 'uint16', 1), 71: ('Frg64', 'uint16', 1), 72: ('Frg65', 'uint16', 1), 73: ('Frg66', 'uint16', 1), 74: ('Frg67', 'uint16', 1), 75: ('Frg68', 'uint16', 1), 76: ('Frg69', 'uint16', 1), 77: ('Frg70', 'uint16', 1), 78: ('Frg71', 'uint16', 1), 79: ('Frg72', 'uint16', 1), 80: ('Frg73', 'uint16', 1), 81: ('Frg74', 'uint16', 1), 82: ('Frg75', 'uint16', 1), 83: ('Frg78', 'uint16', 1), 84: ('Frg79', 'uint16', 1), 85: ('Frg80', 'uint16', 1), 86: ('Ts', 'uint32', 2), 88: ('Ms', 'uint16', 1), 89: ('Seq', 'uint16', 1), 90: ('UID', 'uint16', 1), 91: ('Role', 'uint16', 1), 92: ('Alg', 'enum16', 1), 93: ('N', 'uint16', 1)})}
